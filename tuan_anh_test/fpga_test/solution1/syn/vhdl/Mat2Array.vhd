-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mat2Array is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_empty_n : IN STD_LOGIC;
    img_data_stream_V_read : OUT STD_LOGIC;
    m_axi_fb_AWVALID : OUT STD_LOGIC;
    m_axi_fb_AWREADY : IN STD_LOGIC;
    m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WVALID : OUT STD_LOGIC;
    m_axi_fb_WREADY : IN STD_LOGIC;
    m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WLAST : OUT STD_LOGIC;
    m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARVALID : OUT STD_LOGIC;
    m_axi_fb_ARREADY : IN STD_LOGIC;
    m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RVALID : IN STD_LOGIC;
    m_axi_fb_RREADY : OUT STD_LOGIC;
    m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_RLAST : IN STD_LOGIC;
    m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BVALID : IN STD_LOGIC;
    m_axi_fb_BREADY : OUT STD_LOGIC;
    m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fb_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Mat2Array is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_780 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011110000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal fb_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal fb_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_234_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fb_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal t_V_1_reg_131 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_cast_fu_142_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_215 : STD_LOGIC_VECTOR (32 downto 0);
    signal row_V_fu_152_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_V_reg_223 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal fb_addr_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_fb_WREADY : STD_LOGIC;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal col_V_fu_209_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_3_reg_243 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_fb_AWREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal t_V_reg_120 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum1_cast_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_fb_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_fb_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_shl2_fu_166_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_158_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl2_cast_fu_174_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_fu_178_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_cast_fu_184_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum1_fu_188_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_fb_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_fb_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_fb_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_fb_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_m_axi_fb_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_fb_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_fb_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_fb_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_fb_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_fb_WREADY <= ap_const_logic_0;
            else
                if (((exitcond_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_fb_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_fb_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_fb_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    t_V_1_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_1_reg_131 <= col_V_fu_209_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_fb_AWREADY = ap_const_logic_1))) then 
                t_V_1_reg_131 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_fb_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                t_V_reg_120 <= row_V_reg_223;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_120 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_234 <= exitcond_fu_203_p2;
                exitcond_reg_234_pp0_iter1_reg <= exitcond_reg_234;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                fb_addr_reg_228 <= sum1_cast_fu_193_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_V_reg_223 <= row_V_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_cast_reg_215 <= sext_cast_fu_142_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_234 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_243 <= img_data_stream_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_fb_BVALID, ap_enable_reg_pp0_iter1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter2, ap_CS_fsm_state11, ap_CS_fsm_state2, exitcond1_fu_146_p2, exitcond_fu_203_p2, ap_enable_reg_pp0_iter0, ap_sig_ioackin_m_axi_fb_AWREADY, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_fb_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_203_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_203_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((m_axi_fb_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_234)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_reg_234 = ap_const_lv1_0) and (img_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_234, ap_enable_reg_pp0_iter2, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_reg_234 = ap_const_lv1_0) and (img_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_234, ap_enable_reg_pp0_iter2, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_reg_234 = ap_const_lv1_0) and (img_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(img_data_stream_V_empty_n, exitcond_reg_234)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((exitcond_reg_234 = ap_const_lv1_0) and (img_data_stream_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(exitcond_reg_234_pp0_iter1_reg, ap_sig_ioackin_m_axi_fb_WREADY)
    begin
                ap_block_state6_io <= ((exitcond_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_fb_WREADY = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_fu_203_p2)
    begin
        if ((exitcond_fu_203_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_146_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_146_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_fb_AWREADY_assign_proc : process(m_axi_fb_AWREADY, ap_reg_ioackin_m_axi_fb_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_fb_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_fb_AWREADY <= m_axi_fb_AWREADY;
        else 
            ap_sig_ioackin_m_axi_fb_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_fb_WREADY_assign_proc : process(m_axi_fb_WREADY, ap_reg_ioackin_m_axi_fb_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_fb_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_fb_WREADY <= m_axi_fb_WREADY;
        else 
            ap_sig_ioackin_m_axi_fb_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    col_V_fu_209_p2 <= std_logic_vector(unsigned(t_V_1_reg_131) + unsigned(ap_const_lv11_1));
    exitcond1_fu_146_p2 <= "1" when (t_V_reg_120 = ap_const_lv11_438) else "0";
    exitcond_fu_203_p2 <= "1" when (t_V_1_reg_131 = ap_const_lv11_780) else "0";

    fb_blk_n_AW_assign_proc : process(m_axi_fb_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fb_blk_n_AW <= m_axi_fb_AWREADY;
        else 
            fb_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    fb_blk_n_B_assign_proc : process(m_axi_fb_BVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fb_blk_n_B <= m_axi_fb_BVALID;
        else 
            fb_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    fb_blk_n_W_assign_proc : process(m_axi_fb_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_reg_234_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fb_blk_n_W <= m_axi_fb_WREADY;
        else 
            fb_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    img_data_stream_V_blk_n_assign_proc : process(img_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_234)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_reg_234 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_data_stream_V_blk_n <= img_data_stream_V_empty_n;
        else 
            img_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_234, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_234 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_data_stream_V_read <= ap_const_logic_1;
        else 
            img_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_ARADDR <= ap_const_lv32_0;
    m_axi_fb_ARBURST <= ap_const_lv2_0;
    m_axi_fb_ARCACHE <= ap_const_lv4_0;
    m_axi_fb_ARID <= ap_const_lv1_0;
    m_axi_fb_ARLEN <= ap_const_lv32_0;
    m_axi_fb_ARLOCK <= ap_const_lv2_0;
    m_axi_fb_ARPROT <= ap_const_lv3_0;
    m_axi_fb_ARQOS <= ap_const_lv4_0;
    m_axi_fb_ARREGION <= ap_const_lv4_0;
    m_axi_fb_ARSIZE <= ap_const_lv3_0;
    m_axi_fb_ARUSER <= ap_const_lv1_0;
    m_axi_fb_ARVALID <= ap_const_logic_0;
    m_axi_fb_AWADDR <= fb_addr_reg_228;
    m_axi_fb_AWBURST <= ap_const_lv2_0;
    m_axi_fb_AWCACHE <= ap_const_lv4_0;
    m_axi_fb_AWID <= ap_const_lv1_0;
    m_axi_fb_AWLEN <= ap_const_lv32_780;
    m_axi_fb_AWLOCK <= ap_const_lv2_0;
    m_axi_fb_AWPROT <= ap_const_lv3_0;
    m_axi_fb_AWQOS <= ap_const_lv4_0;
    m_axi_fb_AWREGION <= ap_const_lv4_0;
    m_axi_fb_AWSIZE <= ap_const_lv3_0;
    m_axi_fb_AWUSER <= ap_const_lv1_0;

    m_axi_fb_AWVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_fb_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_fb_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_fb_AWVALID <= ap_const_logic_1;
        else 
            m_axi_fb_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fb_BREADY_assign_proc : process(m_axi_fb_BVALID, ap_CS_fsm_state11)
    begin
        if (((m_axi_fb_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_fb_BREADY <= ap_const_logic_1;
        else 
            m_axi_fb_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_RREADY <= ap_const_logic_0;
    m_axi_fb_WDATA <= tmp_3_reg_243;
    m_axi_fb_WID <= ap_const_lv1_0;
    m_axi_fb_WLAST <= ap_const_logic_0;
    m_axi_fb_WSTRB <= ap_const_lv1_1;
    m_axi_fb_WUSER <= ap_const_lv1_0;

    m_axi_fb_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_reg_234_pp0_iter1_reg, ap_reg_ioackin_m_axi_fb_WREADY, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (ap_reg_ioackin_m_axi_fb_WREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_fb_WVALID <= ap_const_logic_1;
        else 
            m_axi_fb_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_166_p3),22));
    p_shl2_fu_166_p3 <= (t_V_reg_120 & ap_const_lv7_0);
    p_shl_fu_158_p3 <= (t_V_reg_120 & ap_const_lv11_0);
    ret_V_fu_178_p2 <= std_logic_vector(unsigned(p_shl_fu_158_p3) - unsigned(p_shl2_cast_fu_174_p1));
    row_V_fu_152_p2 <= std_logic_vector(unsigned(t_V_reg_120) + unsigned(ap_const_lv11_1));
        sext_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fb_offset),33));

        sum1_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum1_fu_188_p2),64));

    sum1_fu_188_p2 <= std_logic_vector(signed(tmp_6_cast_fu_184_p1) + signed(sext_cast_reg_215));
        tmp_6_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_178_p2),33));

end behav;
