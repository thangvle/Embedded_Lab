-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Array2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fb_AWVALID : OUT STD_LOGIC;
    m_axi_fb_AWREADY : IN STD_LOGIC;
    m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WVALID : OUT STD_LOGIC;
    m_axi_fb_WREADY : IN STD_LOGIC;
    m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WLAST : OUT STD_LOGIC;
    m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARVALID : OUT STD_LOGIC;
    m_axi_fb_ARREADY : IN STD_LOGIC;
    m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RVALID : IN STD_LOGIC;
    m_axi_fb_RREADY : OUT STD_LOGIC;
    m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_RLAST : IN STD_LOGIC;
    m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BVALID : IN STD_LOGIC;
    m_axi_fb_BREADY : OUT STD_LOGIC;
    m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fb_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_full_n : IN STD_LOGIC;
    img_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of Array2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fb_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal fb_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_257_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_3_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_cols_V_read_cast_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_cols_V_read_cast_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_rows_V_read_cast_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_rows_V_read_cast_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_fu_152_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_238 : STD_LOGIC_VECTOR (32 downto 0);
    signal row_V_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_V_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal fb_addr_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal col_V_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal fb_pix_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal t_V_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sum1_cast_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_fb_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_fb_ARREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_40_fu_167_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_179_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_fu_171_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl2_fu_183_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_fu_191_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_28_cast_fu_197_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum1_fu_201_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_fb_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_fb_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_m_axi_fb_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_fb_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_fb_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_fb_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    t_V_3_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_3_reg_133 <= col_V_fu_221_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                t_V_3_reg_133 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                t_V_reg_122 <= row_V_reg_246;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_122 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_257 <= exitcond_fu_216_p2;
                exitcond_reg_257_pp0_iter1_reg <= exitcond_reg_257;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                fb_addr_reg_251 <= sum1_cast_fu_206_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                fb_pix_reg_266 <= m_axi_fb_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                img_cols_V_read_cast_reg_227 <= img_cols_V_read_cast_fu_144_p1;
                img_rows_V_read_cast_reg_233 <= img_rows_V_read_cast_fu_148_p1;
                sext_cast_reg_238 <= sext_cast_fu_152_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_V_reg_246 <= row_V_fu_161_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, exitcond2_fu_156_p2, exitcond_fu_216_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_sig_ioackin_m_axi_fb_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_156_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_fb_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_fb_RVALID, img_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_257, ap_enable_reg_pp0_iter2, exitcond_reg_257_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_reg_257_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_reg_257 = ap_const_lv1_0) and (m_axi_fb_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_fb_RVALID, img_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_257, ap_enable_reg_pp0_iter2, exitcond_reg_257_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_reg_257_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_reg_257 = ap_const_lv1_0) and (m_axi_fb_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_fb_RVALID, img_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_257, ap_enable_reg_pp0_iter2, exitcond_reg_257_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_reg_257_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_reg_257 = ap_const_lv1_0) and (m_axi_fb_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(m_axi_fb_RVALID, exitcond_reg_257)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((exitcond_reg_257 = ap_const_lv1_0) and (m_axi_fb_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage0_iter2_assign_proc : process(img_data_stream_V_full_n, exitcond_reg_257_pp0_iter1_reg)
    begin
                ap_block_state12_pp0_stage0_iter2 <= ((exitcond_reg_257_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond_fu_216_p2)
    begin
        if ((exitcond_fu_216_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_156_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_156_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_156_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_156_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_fb_ARREADY_assign_proc : process(m_axi_fb_ARREADY, ap_reg_ioackin_m_axi_fb_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_fb_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_fb_ARREADY <= m_axi_fb_ARREADY;
        else 
            ap_sig_ioackin_m_axi_fb_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    col_V_fu_221_p2 <= std_logic_vector(unsigned(t_V_3_reg_133) + unsigned(ap_const_lv32_1));
    exitcond2_fu_156_p2 <= "1" when (t_V_reg_122 = img_rows_V_read_cast_reg_233) else "0";
    exitcond_fu_216_p2 <= "1" when (t_V_3_reg_133 = img_cols_V_read_cast_reg_227) else "0";

    fb_blk_n_AR_assign_proc : process(m_axi_fb_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fb_blk_n_AR <= m_axi_fb_ARREADY;
        else 
            fb_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    fb_blk_n_R_assign_proc : process(m_axi_fb_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_257)
    begin
        if (((exitcond_reg_257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fb_blk_n_R <= m_axi_fb_RVALID;
        else 
            fb_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

        img_cols_V_read_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(img_cols_V_read),32));


    img_data_stream_V_blk_n_assign_proc : process(img_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_reg_257_pp0_iter1_reg)
    begin
        if (((exitcond_reg_257_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_data_stream_V_blk_n <= img_data_stream_V_full_n;
        else 
            img_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_V_din <= fb_pix_reg_266;

    img_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_reg_257_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_257_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_data_stream_V_write <= ap_const_logic_1;
        else 
            img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

        img_rows_V_read_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(img_rows_V_read),32));

    m_axi_fb_ARADDR <= fb_addr_reg_251;
    m_axi_fb_ARBURST <= ap_const_lv2_0;
    m_axi_fb_ARCACHE <= ap_const_lv4_0;
    m_axi_fb_ARID <= ap_const_lv1_0;
    m_axi_fb_ARLEN <= img_cols_V_read_cast_reg_227;
    m_axi_fb_ARLOCK <= ap_const_lv2_0;
    m_axi_fb_ARPROT <= ap_const_lv3_0;
    m_axi_fb_ARQOS <= ap_const_lv4_0;
    m_axi_fb_ARREGION <= ap_const_lv4_0;
    m_axi_fb_ARSIZE <= ap_const_lv3_0;
    m_axi_fb_ARUSER <= ap_const_lv1_0;

    m_axi_fb_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_fb_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_fb_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_fb_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fb_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_AWADDR <= ap_const_lv32_0;
    m_axi_fb_AWBURST <= ap_const_lv2_0;
    m_axi_fb_AWCACHE <= ap_const_lv4_0;
    m_axi_fb_AWID <= ap_const_lv1_0;
    m_axi_fb_AWLEN <= ap_const_lv32_0;
    m_axi_fb_AWLOCK <= ap_const_lv2_0;
    m_axi_fb_AWPROT <= ap_const_lv3_0;
    m_axi_fb_AWQOS <= ap_const_lv4_0;
    m_axi_fb_AWREGION <= ap_const_lv4_0;
    m_axi_fb_AWSIZE <= ap_const_lv3_0;
    m_axi_fb_AWUSER <= ap_const_lv1_0;
    m_axi_fb_AWVALID <= ap_const_logic_0;
    m_axi_fb_BREADY <= ap_const_logic_0;

    m_axi_fb_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_257, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fb_RREADY <= ap_const_logic_1;
        else 
            m_axi_fb_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_WDATA <= ap_const_lv8_0;
    m_axi_fb_WID <= ap_const_lv1_0;
    m_axi_fb_WLAST <= ap_const_logic_0;
    m_axi_fb_WSTRB <= ap_const_lv1_0;
    m_axi_fb_WUSER <= ap_const_lv1_0;
    m_axi_fb_WVALID <= ap_const_logic_0;
    p_shl2_fu_183_p3 <= (tmp_41_fu_179_p1 & ap_const_lv7_0);
    p_shl_fu_171_p3 <= (tmp_40_fu_167_p1 & ap_const_lv11_0);
    ret_V_fu_191_p2 <= std_logic_vector(unsigned(p_shl_fu_171_p3) - unsigned(p_shl2_fu_183_p3));
    row_V_fu_161_p2 <= std_logic_vector(unsigned(t_V_reg_122) + unsigned(ap_const_lv32_1));
        sext_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fb_offset),33));

        sum1_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum1_fu_201_p2),64));

    sum1_fu_201_p2 <= std_logic_vector(signed(tmp_28_cast_fu_197_p1) + signed(sext_cast_reg_238));
        tmp_28_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_191_p2),33));

    tmp_40_fu_167_p1 <= t_V_reg_122(11 - 1 downto 0);
    tmp_41_fu_179_p1 <= t_V_reg_122(15 - 1 downto 0);
end behav;
