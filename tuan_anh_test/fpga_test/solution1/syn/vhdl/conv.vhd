-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CRTL_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CRTL_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_CRTL_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CRTL_BUS_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_CRTL_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_CRTL_BUS_AWREADY : IN STD_LOGIC;
    m_axi_CRTL_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CRTL_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_WVALID : OUT STD_LOGIC;
    m_axi_CRTL_BUS_WREADY : IN STD_LOGIC;
    m_axi_CRTL_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_CRTL_BUS_WLAST : OUT STD_LOGIC;
    m_axi_CRTL_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_CRTL_BUS_ARREADY : IN STD_LOGIC;
    m_axi_CRTL_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CRTL_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RVALID : IN STD_LOGIC;
    m_axi_CRTL_BUS_RREADY : OUT STD_LOGIC;
    m_axi_CRTL_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RLAST : IN STD_LOGIC;
    m_axi_CRTL_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_BVALID : IN STD_LOGIC;
    m_axi_CRTL_BUS_BREADY : OUT STD_LOGIC;
    m_axi_CRTL_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1784,HLS_SYN_LUT=3380,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal image_in : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out : STD_LOGIC_VECTOR (31 downto 0);
    signal CRTL_BUS_AWREADY : STD_LOGIC;
    signal CRTL_BUS_WREADY : STD_LOGIC;
    signal CRTL_BUS_ARREADY : STD_LOGIC;
    signal CRTL_BUS_RVALID : STD_LOGIC;
    signal CRTL_BUS_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal CRTL_BUS_RLAST : STD_LOGIC;
    signal CRTL_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_BVALID : STD_LOGIC;
    signal CRTL_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_proc19_U0_ap_start : STD_LOGIC;
    signal Block_proc19_U0_ap_done : STD_LOGIC;
    signal Block_proc19_U0_ap_continue : STD_LOGIC;
    signal Block_proc19_U0_ap_idle : STD_LOGIC;
    signal Block_proc19_U0_ap_ready : STD_LOGIC;
    signal Block_proc19_U0_start_out : STD_LOGIC;
    signal Block_proc19_U0_start_write : STD_LOGIC;
    signal Block_proc19_U0_src_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc19_U0_src_rows_V_out_write : STD_LOGIC;
    signal Block_proc19_U0_src_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc19_U0_src_cols_V_out_write : STD_LOGIC;
    signal Block_proc19_U0_image_in_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc19_U0_image_in_out_write : STD_LOGIC;
    signal Block_proc19_U0_image_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc19_U0_image_out_out_write : STD_LOGIC;
    signal AXIM2Mat_U0_ap_start : STD_LOGIC;
    signal AXIM2Mat_U0_ap_done : STD_LOGIC;
    signal AXIM2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIM2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIM2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIM2Mat_U0_start_out : STD_LOGIC;
    signal AXIM2Mat_U0_start_write : STD_LOGIC;
    signal AXIM2Mat_U0_m_axi_fb_AWVALID : STD_LOGIC;
    signal AXIM2Mat_U0_m_axi_fb_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_WVALID : STD_LOGIC;
    signal AXIM2Mat_U0_m_axi_fb_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_WLAST : STD_LOGIC;
    signal AXIM2Mat_U0_m_axi_fb_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARVALID : STD_LOGIC;
    signal AXIM2Mat_U0_m_axi_fb_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIM2Mat_U0_m_axi_fb_RREADY : STD_LOGIC;
    signal AXIM2Mat_U0_m_axi_fb_BREADY : STD_LOGIC;
    signal AXIM2Mat_U0_fb_offset_read : STD_LOGIC;
    signal AXIM2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIM2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIM2Mat_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIM2Mat_U0_img_data_stream_V_write : STD_LOGIC;
    signal AXIM2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIM2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIM2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIM2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal Filter2D_U0_ap_start : STD_LOGIC;
    signal Filter2D_U0_ap_done : STD_LOGIC;
    signal Filter2D_U0_ap_continue : STD_LOGIC;
    signal Filter2D_U0_ap_idle : STD_LOGIC;
    signal Filter2D_U0_ap_ready : STD_LOGIC;
    signal Filter2D_U0_p_src_rows_V_read : STD_LOGIC;
    signal Filter2D_U0_p_src_cols_V_read : STD_LOGIC;
    signal Filter2D_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Filter2D_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Filter2D_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Mat2AXIM_U0_ap_start : STD_LOGIC;
    signal Mat2AXIM_U0_ap_done : STD_LOGIC;
    signal Mat2AXIM_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIM_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIM_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIM_U0_img_data_stream_V_read : STD_LOGIC;
    signal Mat2AXIM_U0_m_axi_fb_AWVALID : STD_LOGIC;
    signal Mat2AXIM_U0_m_axi_fb_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_WVALID : STD_LOGIC;
    signal Mat2AXIM_U0_m_axi_fb_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_WLAST : STD_LOGIC;
    signal Mat2AXIM_U0_m_axi_fb_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARVALID : STD_LOGIC;
    signal Mat2AXIM_U0_m_axi_fb_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIM_U0_m_axi_fb_RREADY : STD_LOGIC;
    signal Mat2AXIM_U0_m_axi_fb_BREADY : STD_LOGIC;
    signal Mat2AXIM_U0_fb_offset_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal src_rows_V_c_full_n : STD_LOGIC;
    signal src_rows_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_c_empty_n : STD_LOGIC;
    signal src_cols_V_c_full_n : STD_LOGIC;
    signal src_cols_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_c_empty_n : STD_LOGIC;
    signal image_in_c_full_n : STD_LOGIC;
    signal image_in_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_c_empty_n : STD_LOGIC;
    signal image_out_c_full_n : STD_LOGIC;
    signal image_out_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out_c_empty_n : STD_LOGIC;
    signal src_data_stream_0_V_full_n : STD_LOGIC;
    signal src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_0_V_empty_n : STD_LOGIC;
    signal src_rows_V_c10_full_n : STD_LOGIC;
    signal src_rows_V_c10_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_c10_empty_n : STD_LOGIC;
    signal src_cols_V_c11_full_n : STD_LOGIC;
    signal src_cols_V_c11_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_c11_empty_n : STD_LOGIC;
    signal dst_data_stream_0_V_full_n : STD_LOGIC;
    signal dst_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_data_stream_0_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_proc19_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_proc19_U0_ap_ready : STD_LOGIC;
    signal Block_proc19_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIM2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIM2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIM2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Mat2AXIM_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIM_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIM_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIM_U0_empty_n : STD_LOGIC;
    signal start_for_Filter2D_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_full_n : STD_LOGIC;
    signal start_for_Filter2D_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_empty_n : STD_LOGIC;
    signal Filter2D_U0_start_full_n : STD_LOGIC;
    signal Filter2D_U0_start_write : STD_LOGIC;
    signal Mat2AXIM_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIM_U0_start_write : STD_LOGIC;

    component Block_proc19 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        src_rows_V_out_full_n : IN STD_LOGIC;
        src_rows_V_out_write : OUT STD_LOGIC;
        src_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_out_full_n : IN STD_LOGIC;
        src_cols_V_out_write : OUT STD_LOGIC;
        image_in : IN STD_LOGIC_VECTOR (31 downto 0);
        image_out : IN STD_LOGIC_VECTOR (31 downto 0);
        image_in_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_out_full_n : IN STD_LOGIC;
        image_in_out_write : OUT STD_LOGIC;
        image_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_out_out_full_n : IN STD_LOGIC;
        image_out_out_write : OUT STD_LOGIC );
    end component;


    component AXIM2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_fb_AWVALID : OUT STD_LOGIC;
        m_axi_fb_AWREADY : IN STD_LOGIC;
        m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WVALID : OUT STD_LOGIC;
        m_axi_fb_WREADY : IN STD_LOGIC;
        m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WLAST : OUT STD_LOGIC;
        m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARVALID : OUT STD_LOGIC;
        m_axi_fb_ARREADY : IN STD_LOGIC;
        m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RVALID : IN STD_LOGIC;
        m_axi_fb_RREADY : OUT STD_LOGIC;
        m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_RLAST : IN STD_LOGIC;
        m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BVALID : IN STD_LOGIC;
        m_axi_fb_BREADY : OUT STD_LOGIC;
        m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fb_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fb_offset_empty_n : IN STD_LOGIC;
        fb_offset_read : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIM IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        m_axi_fb_AWVALID : OUT STD_LOGIC;
        m_axi_fb_AWREADY : IN STD_LOGIC;
        m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WVALID : OUT STD_LOGIC;
        m_axi_fb_WREADY : IN STD_LOGIC;
        m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WLAST : OUT STD_LOGIC;
        m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARVALID : OUT STD_LOGIC;
        m_axi_fb_ARREADY : IN STD_LOGIC;
        m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RVALID : IN STD_LOGIC;
        m_axi_fb_RREADY : OUT STD_LOGIC;
        m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_RLAST : IN STD_LOGIC;
        m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BVALID : IN STD_LOGIC;
        m_axi_fb_BREADY : OUT STD_LOGIC;
        m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fb_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fb_offset_empty_n : IN STD_LOGIC;
        fb_offset_read : OUT STD_LOGIC );
    end component;


    component fifo_w12_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIeOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Filter2fYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component conv_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        image_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_CRTL_BUS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_CRTL_BUS_s_axi_U : component conv_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        image_in => image_in,
        image_out => image_out);

    conv_CRTL_BUS_m_axi_U : component conv_CRTL_BUS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CRTL_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CRTL_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CRTL_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CRTL_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CRTL_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CRTL_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CRTL_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CRTL_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CRTL_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CRTL_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CRTL_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CRTL_BUS_AWVALID,
        AWREADY => m_axi_CRTL_BUS_AWREADY,
        AWADDR => m_axi_CRTL_BUS_AWADDR,
        AWID => m_axi_CRTL_BUS_AWID,
        AWLEN => m_axi_CRTL_BUS_AWLEN,
        AWSIZE => m_axi_CRTL_BUS_AWSIZE,
        AWBURST => m_axi_CRTL_BUS_AWBURST,
        AWLOCK => m_axi_CRTL_BUS_AWLOCK,
        AWCACHE => m_axi_CRTL_BUS_AWCACHE,
        AWPROT => m_axi_CRTL_BUS_AWPROT,
        AWQOS => m_axi_CRTL_BUS_AWQOS,
        AWREGION => m_axi_CRTL_BUS_AWREGION,
        AWUSER => m_axi_CRTL_BUS_AWUSER,
        WVALID => m_axi_CRTL_BUS_WVALID,
        WREADY => m_axi_CRTL_BUS_WREADY,
        WDATA => m_axi_CRTL_BUS_WDATA,
        WSTRB => m_axi_CRTL_BUS_WSTRB,
        WLAST => m_axi_CRTL_BUS_WLAST,
        WID => m_axi_CRTL_BUS_WID,
        WUSER => m_axi_CRTL_BUS_WUSER,
        ARVALID => m_axi_CRTL_BUS_ARVALID,
        ARREADY => m_axi_CRTL_BUS_ARREADY,
        ARADDR => m_axi_CRTL_BUS_ARADDR,
        ARID => m_axi_CRTL_BUS_ARID,
        ARLEN => m_axi_CRTL_BUS_ARLEN,
        ARSIZE => m_axi_CRTL_BUS_ARSIZE,
        ARBURST => m_axi_CRTL_BUS_ARBURST,
        ARLOCK => m_axi_CRTL_BUS_ARLOCK,
        ARCACHE => m_axi_CRTL_BUS_ARCACHE,
        ARPROT => m_axi_CRTL_BUS_ARPROT,
        ARQOS => m_axi_CRTL_BUS_ARQOS,
        ARREGION => m_axi_CRTL_BUS_ARREGION,
        ARUSER => m_axi_CRTL_BUS_ARUSER,
        RVALID => m_axi_CRTL_BUS_RVALID,
        RREADY => m_axi_CRTL_BUS_RREADY,
        RDATA => m_axi_CRTL_BUS_RDATA,
        RLAST => m_axi_CRTL_BUS_RLAST,
        RID => m_axi_CRTL_BUS_RID,
        RUSER => m_axi_CRTL_BUS_RUSER,
        RRESP => m_axi_CRTL_BUS_RRESP,
        BVALID => m_axi_CRTL_BUS_BVALID,
        BREADY => m_axi_CRTL_BUS_BREADY,
        BRESP => m_axi_CRTL_BUS_BRESP,
        BID => m_axi_CRTL_BUS_BID,
        BUSER => m_axi_CRTL_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => AXIM2Mat_U0_m_axi_fb_ARVALID,
        I_ARREADY => CRTL_BUS_ARREADY,
        I_ARADDR => AXIM2Mat_U0_m_axi_fb_ARADDR,
        I_ARID => AXIM2Mat_U0_m_axi_fb_ARID,
        I_ARLEN => AXIM2Mat_U0_m_axi_fb_ARLEN,
        I_ARSIZE => AXIM2Mat_U0_m_axi_fb_ARSIZE,
        I_ARLOCK => AXIM2Mat_U0_m_axi_fb_ARLOCK,
        I_ARCACHE => AXIM2Mat_U0_m_axi_fb_ARCACHE,
        I_ARQOS => AXIM2Mat_U0_m_axi_fb_ARQOS,
        I_ARPROT => AXIM2Mat_U0_m_axi_fb_ARPROT,
        I_ARUSER => AXIM2Mat_U0_m_axi_fb_ARUSER,
        I_ARBURST => AXIM2Mat_U0_m_axi_fb_ARBURST,
        I_ARREGION => AXIM2Mat_U0_m_axi_fb_ARREGION,
        I_RVALID => CRTL_BUS_RVALID,
        I_RREADY => AXIM2Mat_U0_m_axi_fb_RREADY,
        I_RDATA => CRTL_BUS_RDATA,
        I_RID => CRTL_BUS_RID,
        I_RUSER => CRTL_BUS_RUSER,
        I_RRESP => CRTL_BUS_RRESP,
        I_RLAST => CRTL_BUS_RLAST,
        I_AWVALID => Mat2AXIM_U0_m_axi_fb_AWVALID,
        I_AWREADY => CRTL_BUS_AWREADY,
        I_AWADDR => Mat2AXIM_U0_m_axi_fb_AWADDR,
        I_AWID => Mat2AXIM_U0_m_axi_fb_AWID,
        I_AWLEN => Mat2AXIM_U0_m_axi_fb_AWLEN,
        I_AWSIZE => Mat2AXIM_U0_m_axi_fb_AWSIZE,
        I_AWLOCK => Mat2AXIM_U0_m_axi_fb_AWLOCK,
        I_AWCACHE => Mat2AXIM_U0_m_axi_fb_AWCACHE,
        I_AWQOS => Mat2AXIM_U0_m_axi_fb_AWQOS,
        I_AWPROT => Mat2AXIM_U0_m_axi_fb_AWPROT,
        I_AWUSER => Mat2AXIM_U0_m_axi_fb_AWUSER,
        I_AWBURST => Mat2AXIM_U0_m_axi_fb_AWBURST,
        I_AWREGION => Mat2AXIM_U0_m_axi_fb_AWREGION,
        I_WVALID => Mat2AXIM_U0_m_axi_fb_WVALID,
        I_WREADY => CRTL_BUS_WREADY,
        I_WDATA => Mat2AXIM_U0_m_axi_fb_WDATA,
        I_WID => Mat2AXIM_U0_m_axi_fb_WID,
        I_WUSER => Mat2AXIM_U0_m_axi_fb_WUSER,
        I_WLAST => Mat2AXIM_U0_m_axi_fb_WLAST,
        I_WSTRB => Mat2AXIM_U0_m_axi_fb_WSTRB,
        I_BVALID => CRTL_BUS_BVALID,
        I_BREADY => Mat2AXIM_U0_m_axi_fb_BREADY,
        I_BRESP => CRTL_BUS_BRESP,
        I_BID => CRTL_BUS_BID,
        I_BUSER => CRTL_BUS_BUSER);

    Block_proc19_U0 : component Block_proc19
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc19_U0_ap_start,
        start_full_n => start_for_Mat2AXIM_U0_full_n,
        ap_done => Block_proc19_U0_ap_done,
        ap_continue => Block_proc19_U0_ap_continue,
        ap_idle => Block_proc19_U0_ap_idle,
        ap_ready => Block_proc19_U0_ap_ready,
        start_out => Block_proc19_U0_start_out,
        start_write => Block_proc19_U0_start_write,
        src_rows_V_out_din => Block_proc19_U0_src_rows_V_out_din,
        src_rows_V_out_full_n => src_rows_V_c_full_n,
        src_rows_V_out_write => Block_proc19_U0_src_rows_V_out_write,
        src_cols_V_out_din => Block_proc19_U0_src_cols_V_out_din,
        src_cols_V_out_full_n => src_cols_V_c_full_n,
        src_cols_V_out_write => Block_proc19_U0_src_cols_V_out_write,
        image_in => image_in,
        image_out => image_out,
        image_in_out_din => Block_proc19_U0_image_in_out_din,
        image_in_out_full_n => image_in_c_full_n,
        image_in_out_write => Block_proc19_U0_image_in_out_write,
        image_out_out_din => Block_proc19_U0_image_out_out_din,
        image_out_out_full_n => image_out_c_full_n,
        image_out_out_write => Block_proc19_U0_image_out_out_write);

    AXIM2Mat_U0 : component AXIM2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIM2Mat_U0_ap_start,
        start_full_n => start_for_Filter2D_U0_full_n,
        ap_done => AXIM2Mat_U0_ap_done,
        ap_continue => AXIM2Mat_U0_ap_continue,
        ap_idle => AXIM2Mat_U0_ap_idle,
        ap_ready => AXIM2Mat_U0_ap_ready,
        start_out => AXIM2Mat_U0_start_out,
        start_write => AXIM2Mat_U0_start_write,
        m_axi_fb_AWVALID => AXIM2Mat_U0_m_axi_fb_AWVALID,
        m_axi_fb_AWREADY => ap_const_logic_0,
        m_axi_fb_AWADDR => AXIM2Mat_U0_m_axi_fb_AWADDR,
        m_axi_fb_AWID => AXIM2Mat_U0_m_axi_fb_AWID,
        m_axi_fb_AWLEN => AXIM2Mat_U0_m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE => AXIM2Mat_U0_m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST => AXIM2Mat_U0_m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK => AXIM2Mat_U0_m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE => AXIM2Mat_U0_m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT => AXIM2Mat_U0_m_axi_fb_AWPROT,
        m_axi_fb_AWQOS => AXIM2Mat_U0_m_axi_fb_AWQOS,
        m_axi_fb_AWREGION => AXIM2Mat_U0_m_axi_fb_AWREGION,
        m_axi_fb_AWUSER => AXIM2Mat_U0_m_axi_fb_AWUSER,
        m_axi_fb_WVALID => AXIM2Mat_U0_m_axi_fb_WVALID,
        m_axi_fb_WREADY => ap_const_logic_0,
        m_axi_fb_WDATA => AXIM2Mat_U0_m_axi_fb_WDATA,
        m_axi_fb_WSTRB => AXIM2Mat_U0_m_axi_fb_WSTRB,
        m_axi_fb_WLAST => AXIM2Mat_U0_m_axi_fb_WLAST,
        m_axi_fb_WID => AXIM2Mat_U0_m_axi_fb_WID,
        m_axi_fb_WUSER => AXIM2Mat_U0_m_axi_fb_WUSER,
        m_axi_fb_ARVALID => AXIM2Mat_U0_m_axi_fb_ARVALID,
        m_axi_fb_ARREADY => CRTL_BUS_ARREADY,
        m_axi_fb_ARADDR => AXIM2Mat_U0_m_axi_fb_ARADDR,
        m_axi_fb_ARID => AXIM2Mat_U0_m_axi_fb_ARID,
        m_axi_fb_ARLEN => AXIM2Mat_U0_m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE => AXIM2Mat_U0_m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST => AXIM2Mat_U0_m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK => AXIM2Mat_U0_m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE => AXIM2Mat_U0_m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT => AXIM2Mat_U0_m_axi_fb_ARPROT,
        m_axi_fb_ARQOS => AXIM2Mat_U0_m_axi_fb_ARQOS,
        m_axi_fb_ARREGION => AXIM2Mat_U0_m_axi_fb_ARREGION,
        m_axi_fb_ARUSER => AXIM2Mat_U0_m_axi_fb_ARUSER,
        m_axi_fb_RVALID => CRTL_BUS_RVALID,
        m_axi_fb_RREADY => AXIM2Mat_U0_m_axi_fb_RREADY,
        m_axi_fb_RDATA => CRTL_BUS_RDATA,
        m_axi_fb_RLAST => CRTL_BUS_RLAST,
        m_axi_fb_RID => CRTL_BUS_RID,
        m_axi_fb_RUSER => CRTL_BUS_RUSER,
        m_axi_fb_RRESP => CRTL_BUS_RRESP,
        m_axi_fb_BVALID => ap_const_logic_0,
        m_axi_fb_BREADY => AXIM2Mat_U0_m_axi_fb_BREADY,
        m_axi_fb_BRESP => ap_const_lv2_0,
        m_axi_fb_BID => ap_const_lv1_0,
        m_axi_fb_BUSER => ap_const_lv1_0,
        fb_offset_dout => image_in_c_dout,
        fb_offset_empty_n => image_in_c_empty_n,
        fb_offset_read => AXIM2Mat_U0_fb_offset_read,
        img_rows_V_dout => src_rows_V_c_dout,
        img_rows_V_empty_n => src_rows_V_c_empty_n,
        img_rows_V_read => AXIM2Mat_U0_img_rows_V_read,
        img_cols_V_dout => src_cols_V_c_dout,
        img_cols_V_empty_n => src_cols_V_c_empty_n,
        img_cols_V_read => AXIM2Mat_U0_img_cols_V_read,
        img_data_stream_V_din => AXIM2Mat_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => src_data_stream_0_V_full_n,
        img_data_stream_V_write => AXIM2Mat_U0_img_data_stream_V_write,
        img_rows_V_out_din => AXIM2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => src_rows_V_c10_full_n,
        img_rows_V_out_write => AXIM2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIM2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => src_cols_V_c11_full_n,
        img_cols_V_out_write => AXIM2Mat_U0_img_cols_V_out_write);

    Filter2D_U0 : component Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2D_U0_ap_start,
        ap_done => Filter2D_U0_ap_done,
        ap_continue => Filter2D_U0_ap_continue,
        ap_idle => Filter2D_U0_ap_idle,
        ap_ready => Filter2D_U0_ap_ready,
        p_src_rows_V_dout => src_rows_V_c10_dout,
        p_src_rows_V_empty_n => src_rows_V_c10_empty_n,
        p_src_rows_V_read => Filter2D_U0_p_src_rows_V_read,
        p_src_cols_V_dout => src_cols_V_c11_dout,
        p_src_cols_V_empty_n => src_cols_V_c11_empty_n,
        p_src_cols_V_read => Filter2D_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => src_data_stream_0_V_dout,
        p_src_data_stream_V_empty_n => src_data_stream_0_V_empty_n,
        p_src_data_stream_V_read => Filter2D_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Filter2D_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dst_data_stream_0_V_full_n,
        p_dst_data_stream_V_write => Filter2D_U0_p_dst_data_stream_V_write);

    Mat2AXIM_U0 : component Mat2AXIM
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIM_U0_ap_start,
        ap_done => Mat2AXIM_U0_ap_done,
        ap_continue => Mat2AXIM_U0_ap_continue,
        ap_idle => Mat2AXIM_U0_ap_idle,
        ap_ready => Mat2AXIM_U0_ap_ready,
        img_data_stream_V_dout => dst_data_stream_0_V_dout,
        img_data_stream_V_empty_n => dst_data_stream_0_V_empty_n,
        img_data_stream_V_read => Mat2AXIM_U0_img_data_stream_V_read,
        m_axi_fb_AWVALID => Mat2AXIM_U0_m_axi_fb_AWVALID,
        m_axi_fb_AWREADY => CRTL_BUS_AWREADY,
        m_axi_fb_AWADDR => Mat2AXIM_U0_m_axi_fb_AWADDR,
        m_axi_fb_AWID => Mat2AXIM_U0_m_axi_fb_AWID,
        m_axi_fb_AWLEN => Mat2AXIM_U0_m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE => Mat2AXIM_U0_m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST => Mat2AXIM_U0_m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK => Mat2AXIM_U0_m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE => Mat2AXIM_U0_m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT => Mat2AXIM_U0_m_axi_fb_AWPROT,
        m_axi_fb_AWQOS => Mat2AXIM_U0_m_axi_fb_AWQOS,
        m_axi_fb_AWREGION => Mat2AXIM_U0_m_axi_fb_AWREGION,
        m_axi_fb_AWUSER => Mat2AXIM_U0_m_axi_fb_AWUSER,
        m_axi_fb_WVALID => Mat2AXIM_U0_m_axi_fb_WVALID,
        m_axi_fb_WREADY => CRTL_BUS_WREADY,
        m_axi_fb_WDATA => Mat2AXIM_U0_m_axi_fb_WDATA,
        m_axi_fb_WSTRB => Mat2AXIM_U0_m_axi_fb_WSTRB,
        m_axi_fb_WLAST => Mat2AXIM_U0_m_axi_fb_WLAST,
        m_axi_fb_WID => Mat2AXIM_U0_m_axi_fb_WID,
        m_axi_fb_WUSER => Mat2AXIM_U0_m_axi_fb_WUSER,
        m_axi_fb_ARVALID => Mat2AXIM_U0_m_axi_fb_ARVALID,
        m_axi_fb_ARREADY => ap_const_logic_0,
        m_axi_fb_ARADDR => Mat2AXIM_U0_m_axi_fb_ARADDR,
        m_axi_fb_ARID => Mat2AXIM_U0_m_axi_fb_ARID,
        m_axi_fb_ARLEN => Mat2AXIM_U0_m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE => Mat2AXIM_U0_m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST => Mat2AXIM_U0_m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK => Mat2AXIM_U0_m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE => Mat2AXIM_U0_m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT => Mat2AXIM_U0_m_axi_fb_ARPROT,
        m_axi_fb_ARQOS => Mat2AXIM_U0_m_axi_fb_ARQOS,
        m_axi_fb_ARREGION => Mat2AXIM_U0_m_axi_fb_ARREGION,
        m_axi_fb_ARUSER => Mat2AXIM_U0_m_axi_fb_ARUSER,
        m_axi_fb_RVALID => ap_const_logic_0,
        m_axi_fb_RREADY => Mat2AXIM_U0_m_axi_fb_RREADY,
        m_axi_fb_RDATA => ap_const_lv8_0,
        m_axi_fb_RLAST => ap_const_logic_0,
        m_axi_fb_RID => ap_const_lv1_0,
        m_axi_fb_RUSER => ap_const_lv1_0,
        m_axi_fb_RRESP => ap_const_lv2_0,
        m_axi_fb_BVALID => CRTL_BUS_BVALID,
        m_axi_fb_BREADY => Mat2AXIM_U0_m_axi_fb_BREADY,
        m_axi_fb_BRESP => CRTL_BUS_BRESP,
        m_axi_fb_BID => CRTL_BUS_BID,
        m_axi_fb_BUSER => CRTL_BUS_BUSER,
        fb_offset_dout => image_out_c_dout,
        fb_offset_empty_n => image_out_c_empty_n,
        fb_offset_read => Mat2AXIM_U0_fb_offset_read);

    src_rows_V_c_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc19_U0_src_rows_V_out_din,
        if_full_n => src_rows_V_c_full_n,
        if_write => Block_proc19_U0_src_rows_V_out_write,
        if_dout => src_rows_V_c_dout,
        if_empty_n => src_rows_V_c_empty_n,
        if_read => AXIM2Mat_U0_img_rows_V_read);

    src_cols_V_c_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc19_U0_src_cols_V_out_din,
        if_full_n => src_cols_V_c_full_n,
        if_write => Block_proc19_U0_src_cols_V_out_write,
        if_dout => src_cols_V_c_dout,
        if_empty_n => src_cols_V_c_empty_n,
        if_read => AXIM2Mat_U0_img_cols_V_read);

    image_in_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc19_U0_image_in_out_din,
        if_full_n => image_in_c_full_n,
        if_write => Block_proc19_U0_image_in_out_write,
        if_dout => image_in_c_dout,
        if_empty_n => image_in_c_empty_n,
        if_read => AXIM2Mat_U0_fb_offset_read);

    image_out_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc19_U0_image_out_out_din,
        if_full_n => image_out_c_full_n,
        if_write => Block_proc19_U0_image_out_out_write,
        if_dout => image_out_c_dout,
        if_empty_n => image_out_c_empty_n,
        if_read => Mat2AXIM_U0_fb_offset_read);

    src_data_stream_0_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIM2Mat_U0_img_data_stream_V_din,
        if_full_n => src_data_stream_0_V_full_n,
        if_write => AXIM2Mat_U0_img_data_stream_V_write,
        if_dout => src_data_stream_0_V_dout,
        if_empty_n => src_data_stream_0_V_empty_n,
        if_read => Filter2D_U0_p_src_data_stream_V_read);

    src_rows_V_c10_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIM2Mat_U0_img_rows_V_out_din,
        if_full_n => src_rows_V_c10_full_n,
        if_write => AXIM2Mat_U0_img_rows_V_out_write,
        if_dout => src_rows_V_c10_dout,
        if_empty_n => src_rows_V_c10_empty_n,
        if_read => Filter2D_U0_p_src_rows_V_read);

    src_cols_V_c11_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIM2Mat_U0_img_cols_V_out_din,
        if_full_n => src_cols_V_c11_full_n,
        if_write => AXIM2Mat_U0_img_cols_V_out_write,
        if_dout => src_cols_V_c11_dout,
        if_empty_n => src_cols_V_c11_empty_n,
        if_read => Filter2D_U0_p_src_cols_V_read);

    dst_data_stream_0_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_p_dst_data_stream_V_din,
        if_full_n => dst_data_stream_0_V_full_n,
        if_write => Filter2D_U0_p_dst_data_stream_V_write,
        if_dout => dst_data_stream_0_V_dout,
        if_empty_n => dst_data_stream_0_V_empty_n,
        if_read => Mat2AXIM_U0_img_data_stream_V_read);

    start_for_Mat2AXIeOg_U : component start_for_Mat2AXIeOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIM_U0_din,
        if_full_n => start_for_Mat2AXIM_U0_full_n,
        if_write => Block_proc19_U0_start_write,
        if_dout => start_for_Mat2AXIM_U0_dout,
        if_empty_n => start_for_Mat2AXIM_U0_empty_n,
        if_read => Mat2AXIM_U0_ap_ready);

    start_for_Filter2fYi_U : component start_for_Filter2fYi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Filter2D_U0_din,
        if_full_n => start_for_Filter2D_U0_full_n,
        if_write => AXIM2Mat_U0_start_write,
        if_dout => start_for_Filter2D_U0_dout,
        if_empty_n => start_for_Filter2D_U0_empty_n,
        if_read => Filter2D_U0_ap_ready);





    ap_sync_reg_AXIM2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIM2Mat_U0_ap_ready <= ap_sync_AXIM2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_proc19_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_proc19_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_proc19_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_proc19_U0_ap_ready <= ap_sync_Block_proc19_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIM2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIM2Mat_U0_ap_ready))) then 
                AXIM2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIM2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = AXIM2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                AXIM2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIM2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_proc19_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Block_proc19_U0_ap_ready))) then 
                Block_proc19_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc19_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_proc19_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_proc19_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc19_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIM2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIM2Mat_U0_ap_start <= ((ap_sync_reg_AXIM2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_proc19_U0_ap_continue <= ap_const_logic_1;
    Block_proc19_U0_ap_start <= ((ap_sync_reg_Block_proc19_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Filter2D_U0_ap_continue <= ap_const_logic_1;
    Filter2D_U0_ap_start <= start_for_Filter2D_U0_empty_n;
    Filter2D_U0_start_full_n <= ap_const_logic_1;
    Filter2D_U0_start_write <= ap_const_logic_0;
    Mat2AXIM_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIM_U0_ap_start <= start_for_Mat2AXIM_U0_empty_n;
    Mat2AXIM_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIM_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIM_U0_ap_done;
    ap_idle <= (Mat2AXIM_U0_ap_idle and Filter2D_U0_ap_idle and Block_proc19_U0_ap_idle and AXIM2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIM2Mat_U0_ap_ready <= (ap_sync_reg_AXIM2Mat_U0_ap_ready or AXIM2Mat_U0_ap_ready);
    ap_sync_Block_proc19_U0_ap_ready <= (ap_sync_reg_Block_proc19_U0_ap_ready or Block_proc19_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIM_U0_ap_done;
    ap_sync_ready <= (ap_sync_Block_proc19_U0_ap_ready and ap_sync_AXIM2Mat_U0_ap_ready);
    start_for_Filter2D_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIM_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
