// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2AXIM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_data_stream_V_dout,
        img_data_stream_V_empty_n,
        img_data_stream_V_read,
        m_axi_fb_AWVALID,
        m_axi_fb_AWREADY,
        m_axi_fb_AWADDR,
        m_axi_fb_AWID,
        m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT,
        m_axi_fb_AWQOS,
        m_axi_fb_AWREGION,
        m_axi_fb_AWUSER,
        m_axi_fb_WVALID,
        m_axi_fb_WREADY,
        m_axi_fb_WDATA,
        m_axi_fb_WSTRB,
        m_axi_fb_WLAST,
        m_axi_fb_WID,
        m_axi_fb_WUSER,
        m_axi_fb_ARVALID,
        m_axi_fb_ARREADY,
        m_axi_fb_ARADDR,
        m_axi_fb_ARID,
        m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT,
        m_axi_fb_ARQOS,
        m_axi_fb_ARREGION,
        m_axi_fb_ARUSER,
        m_axi_fb_RVALID,
        m_axi_fb_RREADY,
        m_axi_fb_RDATA,
        m_axi_fb_RLAST,
        m_axi_fb_RID,
        m_axi_fb_RUSER,
        m_axi_fb_RRESP,
        m_axi_fb_BVALID,
        m_axi_fb_BREADY,
        m_axi_fb_BRESP,
        m_axi_fb_BID,
        m_axi_fb_BUSER,
        fb_offset_dout,
        fb_offset_empty_n,
        fb_offset_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_data_stream_V_dout;
input   img_data_stream_V_empty_n;
output   img_data_stream_V_read;
output   m_axi_fb_AWVALID;
input   m_axi_fb_AWREADY;
output  [31:0] m_axi_fb_AWADDR;
output  [0:0] m_axi_fb_AWID;
output  [31:0] m_axi_fb_AWLEN;
output  [2:0] m_axi_fb_AWSIZE;
output  [1:0] m_axi_fb_AWBURST;
output  [1:0] m_axi_fb_AWLOCK;
output  [3:0] m_axi_fb_AWCACHE;
output  [2:0] m_axi_fb_AWPROT;
output  [3:0] m_axi_fb_AWQOS;
output  [3:0] m_axi_fb_AWREGION;
output  [0:0] m_axi_fb_AWUSER;
output   m_axi_fb_WVALID;
input   m_axi_fb_WREADY;
output  [7:0] m_axi_fb_WDATA;
output  [0:0] m_axi_fb_WSTRB;
output   m_axi_fb_WLAST;
output  [0:0] m_axi_fb_WID;
output  [0:0] m_axi_fb_WUSER;
output   m_axi_fb_ARVALID;
input   m_axi_fb_ARREADY;
output  [31:0] m_axi_fb_ARADDR;
output  [0:0] m_axi_fb_ARID;
output  [31:0] m_axi_fb_ARLEN;
output  [2:0] m_axi_fb_ARSIZE;
output  [1:0] m_axi_fb_ARBURST;
output  [1:0] m_axi_fb_ARLOCK;
output  [3:0] m_axi_fb_ARCACHE;
output  [2:0] m_axi_fb_ARPROT;
output  [3:0] m_axi_fb_ARQOS;
output  [3:0] m_axi_fb_ARREGION;
output  [0:0] m_axi_fb_ARUSER;
input   m_axi_fb_RVALID;
output   m_axi_fb_RREADY;
input  [7:0] m_axi_fb_RDATA;
input   m_axi_fb_RLAST;
input  [0:0] m_axi_fb_RID;
input  [0:0] m_axi_fb_RUSER;
input  [1:0] m_axi_fb_RRESP;
input   m_axi_fb_BVALID;
output   m_axi_fb_BREADY;
input  [1:0] m_axi_fb_BRESP;
input  [0:0] m_axi_fb_BID;
input  [0:0] m_axi_fb_BUSER;
input  [31:0] fb_offset_dout;
input   fb_offset_empty_n;
output   fb_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_V_read;
reg m_axi_fb_AWVALID;
reg m_axi_fb_WVALID;
reg m_axi_fb_BREADY;
reg fb_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fb_offset_blk_n;
reg   [31:0] fb_offset_read_reg_70;
reg    ap_block_state1;
wire    grp_Mat2Array_fu_60_ap_start;
wire    grp_Mat2Array_fu_60_ap_done;
wire    grp_Mat2Array_fu_60_ap_idle;
wire    grp_Mat2Array_fu_60_ap_ready;
wire    grp_Mat2Array_fu_60_img_data_stream_V_read;
wire    grp_Mat2Array_fu_60_m_axi_fb_AWVALID;
wire   [31:0] grp_Mat2Array_fu_60_m_axi_fb_AWADDR;
wire   [0:0] grp_Mat2Array_fu_60_m_axi_fb_AWID;
wire   [31:0] grp_Mat2Array_fu_60_m_axi_fb_AWLEN;
wire   [2:0] grp_Mat2Array_fu_60_m_axi_fb_AWSIZE;
wire   [1:0] grp_Mat2Array_fu_60_m_axi_fb_AWBURST;
wire   [1:0] grp_Mat2Array_fu_60_m_axi_fb_AWLOCK;
wire   [3:0] grp_Mat2Array_fu_60_m_axi_fb_AWCACHE;
wire   [2:0] grp_Mat2Array_fu_60_m_axi_fb_AWPROT;
wire   [3:0] grp_Mat2Array_fu_60_m_axi_fb_AWQOS;
wire   [3:0] grp_Mat2Array_fu_60_m_axi_fb_AWREGION;
wire   [0:0] grp_Mat2Array_fu_60_m_axi_fb_AWUSER;
wire    grp_Mat2Array_fu_60_m_axi_fb_WVALID;
wire   [7:0] grp_Mat2Array_fu_60_m_axi_fb_WDATA;
wire   [0:0] grp_Mat2Array_fu_60_m_axi_fb_WSTRB;
wire    grp_Mat2Array_fu_60_m_axi_fb_WLAST;
wire   [0:0] grp_Mat2Array_fu_60_m_axi_fb_WID;
wire   [0:0] grp_Mat2Array_fu_60_m_axi_fb_WUSER;
wire    grp_Mat2Array_fu_60_m_axi_fb_ARVALID;
wire   [31:0] grp_Mat2Array_fu_60_m_axi_fb_ARADDR;
wire   [0:0] grp_Mat2Array_fu_60_m_axi_fb_ARID;
wire   [31:0] grp_Mat2Array_fu_60_m_axi_fb_ARLEN;
wire   [2:0] grp_Mat2Array_fu_60_m_axi_fb_ARSIZE;
wire   [1:0] grp_Mat2Array_fu_60_m_axi_fb_ARBURST;
wire   [1:0] grp_Mat2Array_fu_60_m_axi_fb_ARLOCK;
wire   [3:0] grp_Mat2Array_fu_60_m_axi_fb_ARCACHE;
wire   [2:0] grp_Mat2Array_fu_60_m_axi_fb_ARPROT;
wire   [3:0] grp_Mat2Array_fu_60_m_axi_fb_ARQOS;
wire   [3:0] grp_Mat2Array_fu_60_m_axi_fb_ARREGION;
wire   [0:0] grp_Mat2Array_fu_60_m_axi_fb_ARUSER;
wire    grp_Mat2Array_fu_60_m_axi_fb_RREADY;
wire    grp_Mat2Array_fu_60_m_axi_fb_BREADY;
reg    grp_Mat2Array_fu_60_ap_start_reg;
reg    ap_block_state1_ignore_call6;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_Mat2Array_fu_60_ap_start_reg = 1'b0;
end

Mat2Array grp_Mat2Array_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Mat2Array_fu_60_ap_start),
    .ap_done(grp_Mat2Array_fu_60_ap_done),
    .ap_idle(grp_Mat2Array_fu_60_ap_idle),
    .ap_ready(grp_Mat2Array_fu_60_ap_ready),
    .img_data_stream_V_dout(img_data_stream_V_dout),
    .img_data_stream_V_empty_n(img_data_stream_V_empty_n),
    .img_data_stream_V_read(grp_Mat2Array_fu_60_img_data_stream_V_read),
    .m_axi_fb_AWVALID(grp_Mat2Array_fu_60_m_axi_fb_AWVALID),
    .m_axi_fb_AWREADY(m_axi_fb_AWREADY),
    .m_axi_fb_AWADDR(grp_Mat2Array_fu_60_m_axi_fb_AWADDR),
    .m_axi_fb_AWID(grp_Mat2Array_fu_60_m_axi_fb_AWID),
    .m_axi_fb_AWLEN(grp_Mat2Array_fu_60_m_axi_fb_AWLEN),
    .m_axi_fb_AWSIZE(grp_Mat2Array_fu_60_m_axi_fb_AWSIZE),
    .m_axi_fb_AWBURST(grp_Mat2Array_fu_60_m_axi_fb_AWBURST),
    .m_axi_fb_AWLOCK(grp_Mat2Array_fu_60_m_axi_fb_AWLOCK),
    .m_axi_fb_AWCACHE(grp_Mat2Array_fu_60_m_axi_fb_AWCACHE),
    .m_axi_fb_AWPROT(grp_Mat2Array_fu_60_m_axi_fb_AWPROT),
    .m_axi_fb_AWQOS(grp_Mat2Array_fu_60_m_axi_fb_AWQOS),
    .m_axi_fb_AWREGION(grp_Mat2Array_fu_60_m_axi_fb_AWREGION),
    .m_axi_fb_AWUSER(grp_Mat2Array_fu_60_m_axi_fb_AWUSER),
    .m_axi_fb_WVALID(grp_Mat2Array_fu_60_m_axi_fb_WVALID),
    .m_axi_fb_WREADY(m_axi_fb_WREADY),
    .m_axi_fb_WDATA(grp_Mat2Array_fu_60_m_axi_fb_WDATA),
    .m_axi_fb_WSTRB(grp_Mat2Array_fu_60_m_axi_fb_WSTRB),
    .m_axi_fb_WLAST(grp_Mat2Array_fu_60_m_axi_fb_WLAST),
    .m_axi_fb_WID(grp_Mat2Array_fu_60_m_axi_fb_WID),
    .m_axi_fb_WUSER(grp_Mat2Array_fu_60_m_axi_fb_WUSER),
    .m_axi_fb_ARVALID(grp_Mat2Array_fu_60_m_axi_fb_ARVALID),
    .m_axi_fb_ARREADY(1'b0),
    .m_axi_fb_ARADDR(grp_Mat2Array_fu_60_m_axi_fb_ARADDR),
    .m_axi_fb_ARID(grp_Mat2Array_fu_60_m_axi_fb_ARID),
    .m_axi_fb_ARLEN(grp_Mat2Array_fu_60_m_axi_fb_ARLEN),
    .m_axi_fb_ARSIZE(grp_Mat2Array_fu_60_m_axi_fb_ARSIZE),
    .m_axi_fb_ARBURST(grp_Mat2Array_fu_60_m_axi_fb_ARBURST),
    .m_axi_fb_ARLOCK(grp_Mat2Array_fu_60_m_axi_fb_ARLOCK),
    .m_axi_fb_ARCACHE(grp_Mat2Array_fu_60_m_axi_fb_ARCACHE),
    .m_axi_fb_ARPROT(grp_Mat2Array_fu_60_m_axi_fb_ARPROT),
    .m_axi_fb_ARQOS(grp_Mat2Array_fu_60_m_axi_fb_ARQOS),
    .m_axi_fb_ARREGION(grp_Mat2Array_fu_60_m_axi_fb_ARREGION),
    .m_axi_fb_ARUSER(grp_Mat2Array_fu_60_m_axi_fb_ARUSER),
    .m_axi_fb_RVALID(1'b0),
    .m_axi_fb_RREADY(grp_Mat2Array_fu_60_m_axi_fb_RREADY),
    .m_axi_fb_RDATA(8'd0),
    .m_axi_fb_RLAST(1'b0),
    .m_axi_fb_RID(1'd0),
    .m_axi_fb_RUSER(1'd0),
    .m_axi_fb_RRESP(2'd0),
    .m_axi_fb_BVALID(m_axi_fb_BVALID),
    .m_axi_fb_BREADY(grp_Mat2Array_fu_60_m_axi_fb_BREADY),
    .m_axi_fb_BRESP(m_axi_fb_BRESP),
    .m_axi_fb_BID(m_axi_fb_BID),
    .m_axi_fb_BUSER(m_axi_fb_BUSER),
    .fb_offset(fb_offset_read_reg_70)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Mat2Array_fu_60_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Mat2Array_fu_60_ap_start_reg <= 1'b0;
    end else begin
        if ((~((fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_Mat2Array_fu_60_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2Array_fu_60_ap_ready == 1'b1)) begin
            grp_Mat2Array_fu_60_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fb_offset_read_reg_70 <= fb_offset_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_Mat2Array_fu_60_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_Mat2Array_fu_60_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fb_offset_blk_n = fb_offset_empty_n;
    end else begin
        fb_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fb_offset_read = 1'b1;
    end else begin
        fb_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_data_stream_V_read = grp_Mat2Array_fu_60_img_data_stream_V_read;
    end else begin
        img_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_fb_AWVALID = grp_Mat2Array_fu_60_m_axi_fb_AWVALID;
    end else begin
        m_axi_fb_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_fb_BREADY = grp_Mat2Array_fu_60_m_axi_fb_BREADY;
    end else begin
        m_axi_fb_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_fb_WVALID = grp_Mat2Array_fu_60_m_axi_fb_WVALID;
    end else begin
        m_axi_fb_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_Mat2Array_fu_60_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call6 = ((fb_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_Mat2Array_fu_60_ap_start = grp_Mat2Array_fu_60_ap_start_reg;

assign m_axi_fb_ARADDR = 32'd0;

assign m_axi_fb_ARBURST = 2'd0;

assign m_axi_fb_ARCACHE = 4'd0;

assign m_axi_fb_ARID = 1'd0;

assign m_axi_fb_ARLEN = 32'd0;

assign m_axi_fb_ARLOCK = 2'd0;

assign m_axi_fb_ARPROT = 3'd0;

assign m_axi_fb_ARQOS = 4'd0;

assign m_axi_fb_ARREGION = 4'd0;

assign m_axi_fb_ARSIZE = 3'd0;

assign m_axi_fb_ARUSER = 1'd0;

assign m_axi_fb_ARVALID = 1'b0;

assign m_axi_fb_AWADDR = grp_Mat2Array_fu_60_m_axi_fb_AWADDR;

assign m_axi_fb_AWBURST = grp_Mat2Array_fu_60_m_axi_fb_AWBURST;

assign m_axi_fb_AWCACHE = grp_Mat2Array_fu_60_m_axi_fb_AWCACHE;

assign m_axi_fb_AWID = grp_Mat2Array_fu_60_m_axi_fb_AWID;

assign m_axi_fb_AWLEN = grp_Mat2Array_fu_60_m_axi_fb_AWLEN;

assign m_axi_fb_AWLOCK = grp_Mat2Array_fu_60_m_axi_fb_AWLOCK;

assign m_axi_fb_AWPROT = grp_Mat2Array_fu_60_m_axi_fb_AWPROT;

assign m_axi_fb_AWQOS = grp_Mat2Array_fu_60_m_axi_fb_AWQOS;

assign m_axi_fb_AWREGION = grp_Mat2Array_fu_60_m_axi_fb_AWREGION;

assign m_axi_fb_AWSIZE = grp_Mat2Array_fu_60_m_axi_fb_AWSIZE;

assign m_axi_fb_AWUSER = grp_Mat2Array_fu_60_m_axi_fb_AWUSER;

assign m_axi_fb_RREADY = 1'b0;

assign m_axi_fb_WDATA = grp_Mat2Array_fu_60_m_axi_fb_WDATA;

assign m_axi_fb_WID = grp_Mat2Array_fu_60_m_axi_fb_WID;

assign m_axi_fb_WLAST = grp_Mat2Array_fu_60_m_axi_fb_WLAST;

assign m_axi_fb_WSTRB = grp_Mat2Array_fu_60_m_axi_fb_WSTRB;

assign m_axi_fb_WUSER = grp_Mat2Array_fu_60_m_axi_fb_WUSER;

endmodule //Mat2AXIM
