// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXIM2Mat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXIM2Mat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXIM2Mat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> AXIM2Mat::ap_ST_fsm_state1 = "1";
const sc_lv<2> AXIM2Mat::ap_ST_fsm_state2 = "10";
const sc_lv<32> AXIM2Mat::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> AXIM2Mat::ap_const_lv1_0 = "0";
const sc_lv<3> AXIM2Mat::ap_const_lv3_0 = "000";
const sc_lv<2> AXIM2Mat::ap_const_lv2_0 = "00";
const sc_lv<4> AXIM2Mat::ap_const_lv4_0 = "0000";
const sc_lv<8> AXIM2Mat::ap_const_lv8_0 = "00000000";
const sc_lv<32> AXIM2Mat::ap_const_lv32_1 = "1";
const bool AXIM2Mat::ap_const_boolean_1 = true;

AXIM2Mat::AXIM2Mat(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_Array2Mat_fu_140 = new Array2Mat("grp_Array2Mat_fu_140");
    grp_Array2Mat_fu_140->ap_clk(ap_clk);
    grp_Array2Mat_fu_140->ap_rst(ap_rst);
    grp_Array2Mat_fu_140->ap_start(grp_Array2Mat_fu_140_ap_start);
    grp_Array2Mat_fu_140->ap_done(grp_Array2Mat_fu_140_ap_done);
    grp_Array2Mat_fu_140->ap_idle(grp_Array2Mat_fu_140_ap_idle);
    grp_Array2Mat_fu_140->ap_ready(grp_Array2Mat_fu_140_ap_ready);
    grp_Array2Mat_fu_140->m_axi_fb_AWVALID(grp_Array2Mat_fu_140_m_axi_fb_AWVALID);
    grp_Array2Mat_fu_140->m_axi_fb_AWREADY(ap_var_for_const0);
    grp_Array2Mat_fu_140->m_axi_fb_AWADDR(grp_Array2Mat_fu_140_m_axi_fb_AWADDR);
    grp_Array2Mat_fu_140->m_axi_fb_AWID(grp_Array2Mat_fu_140_m_axi_fb_AWID);
    grp_Array2Mat_fu_140->m_axi_fb_AWLEN(grp_Array2Mat_fu_140_m_axi_fb_AWLEN);
    grp_Array2Mat_fu_140->m_axi_fb_AWSIZE(grp_Array2Mat_fu_140_m_axi_fb_AWSIZE);
    grp_Array2Mat_fu_140->m_axi_fb_AWBURST(grp_Array2Mat_fu_140_m_axi_fb_AWBURST);
    grp_Array2Mat_fu_140->m_axi_fb_AWLOCK(grp_Array2Mat_fu_140_m_axi_fb_AWLOCK);
    grp_Array2Mat_fu_140->m_axi_fb_AWCACHE(grp_Array2Mat_fu_140_m_axi_fb_AWCACHE);
    grp_Array2Mat_fu_140->m_axi_fb_AWPROT(grp_Array2Mat_fu_140_m_axi_fb_AWPROT);
    grp_Array2Mat_fu_140->m_axi_fb_AWQOS(grp_Array2Mat_fu_140_m_axi_fb_AWQOS);
    grp_Array2Mat_fu_140->m_axi_fb_AWREGION(grp_Array2Mat_fu_140_m_axi_fb_AWREGION);
    grp_Array2Mat_fu_140->m_axi_fb_AWUSER(grp_Array2Mat_fu_140_m_axi_fb_AWUSER);
    grp_Array2Mat_fu_140->m_axi_fb_WVALID(grp_Array2Mat_fu_140_m_axi_fb_WVALID);
    grp_Array2Mat_fu_140->m_axi_fb_WREADY(ap_var_for_const0);
    grp_Array2Mat_fu_140->m_axi_fb_WDATA(grp_Array2Mat_fu_140_m_axi_fb_WDATA);
    grp_Array2Mat_fu_140->m_axi_fb_WSTRB(grp_Array2Mat_fu_140_m_axi_fb_WSTRB);
    grp_Array2Mat_fu_140->m_axi_fb_WLAST(grp_Array2Mat_fu_140_m_axi_fb_WLAST);
    grp_Array2Mat_fu_140->m_axi_fb_WID(grp_Array2Mat_fu_140_m_axi_fb_WID);
    grp_Array2Mat_fu_140->m_axi_fb_WUSER(grp_Array2Mat_fu_140_m_axi_fb_WUSER);
    grp_Array2Mat_fu_140->m_axi_fb_ARVALID(grp_Array2Mat_fu_140_m_axi_fb_ARVALID);
    grp_Array2Mat_fu_140->m_axi_fb_ARREADY(m_axi_fb_ARREADY);
    grp_Array2Mat_fu_140->m_axi_fb_ARADDR(grp_Array2Mat_fu_140_m_axi_fb_ARADDR);
    grp_Array2Mat_fu_140->m_axi_fb_ARID(grp_Array2Mat_fu_140_m_axi_fb_ARID);
    grp_Array2Mat_fu_140->m_axi_fb_ARLEN(grp_Array2Mat_fu_140_m_axi_fb_ARLEN);
    grp_Array2Mat_fu_140->m_axi_fb_ARSIZE(grp_Array2Mat_fu_140_m_axi_fb_ARSIZE);
    grp_Array2Mat_fu_140->m_axi_fb_ARBURST(grp_Array2Mat_fu_140_m_axi_fb_ARBURST);
    grp_Array2Mat_fu_140->m_axi_fb_ARLOCK(grp_Array2Mat_fu_140_m_axi_fb_ARLOCK);
    grp_Array2Mat_fu_140->m_axi_fb_ARCACHE(grp_Array2Mat_fu_140_m_axi_fb_ARCACHE);
    grp_Array2Mat_fu_140->m_axi_fb_ARPROT(grp_Array2Mat_fu_140_m_axi_fb_ARPROT);
    grp_Array2Mat_fu_140->m_axi_fb_ARQOS(grp_Array2Mat_fu_140_m_axi_fb_ARQOS);
    grp_Array2Mat_fu_140->m_axi_fb_ARREGION(grp_Array2Mat_fu_140_m_axi_fb_ARREGION);
    grp_Array2Mat_fu_140->m_axi_fb_ARUSER(grp_Array2Mat_fu_140_m_axi_fb_ARUSER);
    grp_Array2Mat_fu_140->m_axi_fb_RVALID(m_axi_fb_RVALID);
    grp_Array2Mat_fu_140->m_axi_fb_RREADY(grp_Array2Mat_fu_140_m_axi_fb_RREADY);
    grp_Array2Mat_fu_140->m_axi_fb_RDATA(m_axi_fb_RDATA);
    grp_Array2Mat_fu_140->m_axi_fb_RLAST(m_axi_fb_RLAST);
    grp_Array2Mat_fu_140->m_axi_fb_RID(m_axi_fb_RID);
    grp_Array2Mat_fu_140->m_axi_fb_RUSER(m_axi_fb_RUSER);
    grp_Array2Mat_fu_140->m_axi_fb_RRESP(m_axi_fb_RRESP);
    grp_Array2Mat_fu_140->m_axi_fb_BVALID(ap_var_for_const0);
    grp_Array2Mat_fu_140->m_axi_fb_BREADY(grp_Array2Mat_fu_140_m_axi_fb_BREADY);
    grp_Array2Mat_fu_140->m_axi_fb_BRESP(ap_var_for_const1);
    grp_Array2Mat_fu_140->m_axi_fb_BID(ap_var_for_const2);
    grp_Array2Mat_fu_140->m_axi_fb_BUSER(ap_var_for_const2);
    grp_Array2Mat_fu_140->fb_offset(fb_offset_read_reg_154);
    grp_Array2Mat_fu_140->img_rows_V_read(img_rows_V_read_reg_159);
    grp_Array2Mat_fu_140->img_cols_V_read(img_cols_V_read_reg_164);
    grp_Array2Mat_fu_140->img_data_stream_V_din(grp_Array2Mat_fu_140_img_data_stream_V_din);
    grp_Array2Mat_fu_140->img_data_stream_V_full_n(img_data_stream_V_full_n);
    grp_Array2Mat_fu_140->img_data_stream_V_write(grp_Array2Mat_fu_140_img_data_stream_V_write);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_ap_block_state1_ignore_call20);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( grp_Array2Mat_fu_140_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_fb_offset_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );

    SC_METHOD(thread_fb_offset_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_grp_Array2Mat_fu_140_ap_start);
    sensitive << ( grp_Array2Mat_fu_140_ap_start_reg );

    SC_METHOD(thread_img_cols_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_cols_V_empty_n );

    SC_METHOD(thread_img_cols_V_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_cols_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_dout );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_cols_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_cols_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_data_stream_V_din);
    sensitive << ( grp_Array2Mat_fu_140_img_data_stream_V_din );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_img_data_stream_V_write);
    sensitive << ( grp_Array2Mat_fu_140_img_data_stream_V_write );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_img_rows_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );

    SC_METHOD(thread_img_rows_V_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_out_full_n );

    SC_METHOD(thread_img_rows_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_dout );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_rows_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_rows_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( grp_Array2Mat_fu_140_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARADDR);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARADDR );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARBURST);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARBURST );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARCACHE);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARCACHE );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARID);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARLEN);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARLEN );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARLOCK);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARLOCK );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARPROT);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARPROT );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARQOS);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARQOS );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARREGION);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARREGION );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARSIZE);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARSIZE );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARUSER);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARUSER );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_ARVALID);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_ARVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_AWADDR);

    SC_METHOD(thread_m_axi_fb_AWBURST);

    SC_METHOD(thread_m_axi_fb_AWCACHE);

    SC_METHOD(thread_m_axi_fb_AWID);

    SC_METHOD(thread_m_axi_fb_AWLEN);

    SC_METHOD(thread_m_axi_fb_AWLOCK);

    SC_METHOD(thread_m_axi_fb_AWPROT);

    SC_METHOD(thread_m_axi_fb_AWQOS);

    SC_METHOD(thread_m_axi_fb_AWREGION);

    SC_METHOD(thread_m_axi_fb_AWSIZE);

    SC_METHOD(thread_m_axi_fb_AWUSER);

    SC_METHOD(thread_m_axi_fb_AWVALID);

    SC_METHOD(thread_m_axi_fb_BREADY);

    SC_METHOD(thread_m_axi_fb_RREADY);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Array2Mat_fu_140_m_axi_fb_RREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_fb_WDATA);

    SC_METHOD(thread_m_axi_fb_WID);

    SC_METHOD(thread_m_axi_fb_WLAST);

    SC_METHOD(thread_m_axi_fb_WSTRB);

    SC_METHOD(thread_m_axi_fb_WUSER);

    SC_METHOD(thread_m_axi_fb_WVALID);

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fb_offset_empty_n );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );
    sensitive << ( grp_Array2Mat_fu_140_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    grp_Array2Mat_fu_140_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXIM2Mat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, m_axi_fb_AWVALID, "(port)m_axi_fb_AWVALID");
    sc_trace(mVcdFile, m_axi_fb_AWREADY, "(port)m_axi_fb_AWREADY");
    sc_trace(mVcdFile, m_axi_fb_AWADDR, "(port)m_axi_fb_AWADDR");
    sc_trace(mVcdFile, m_axi_fb_AWID, "(port)m_axi_fb_AWID");
    sc_trace(mVcdFile, m_axi_fb_AWLEN, "(port)m_axi_fb_AWLEN");
    sc_trace(mVcdFile, m_axi_fb_AWSIZE, "(port)m_axi_fb_AWSIZE");
    sc_trace(mVcdFile, m_axi_fb_AWBURST, "(port)m_axi_fb_AWBURST");
    sc_trace(mVcdFile, m_axi_fb_AWLOCK, "(port)m_axi_fb_AWLOCK");
    sc_trace(mVcdFile, m_axi_fb_AWCACHE, "(port)m_axi_fb_AWCACHE");
    sc_trace(mVcdFile, m_axi_fb_AWPROT, "(port)m_axi_fb_AWPROT");
    sc_trace(mVcdFile, m_axi_fb_AWQOS, "(port)m_axi_fb_AWQOS");
    sc_trace(mVcdFile, m_axi_fb_AWREGION, "(port)m_axi_fb_AWREGION");
    sc_trace(mVcdFile, m_axi_fb_AWUSER, "(port)m_axi_fb_AWUSER");
    sc_trace(mVcdFile, m_axi_fb_WVALID, "(port)m_axi_fb_WVALID");
    sc_trace(mVcdFile, m_axi_fb_WREADY, "(port)m_axi_fb_WREADY");
    sc_trace(mVcdFile, m_axi_fb_WDATA, "(port)m_axi_fb_WDATA");
    sc_trace(mVcdFile, m_axi_fb_WSTRB, "(port)m_axi_fb_WSTRB");
    sc_trace(mVcdFile, m_axi_fb_WLAST, "(port)m_axi_fb_WLAST");
    sc_trace(mVcdFile, m_axi_fb_WID, "(port)m_axi_fb_WID");
    sc_trace(mVcdFile, m_axi_fb_WUSER, "(port)m_axi_fb_WUSER");
    sc_trace(mVcdFile, m_axi_fb_ARVALID, "(port)m_axi_fb_ARVALID");
    sc_trace(mVcdFile, m_axi_fb_ARREADY, "(port)m_axi_fb_ARREADY");
    sc_trace(mVcdFile, m_axi_fb_ARADDR, "(port)m_axi_fb_ARADDR");
    sc_trace(mVcdFile, m_axi_fb_ARID, "(port)m_axi_fb_ARID");
    sc_trace(mVcdFile, m_axi_fb_ARLEN, "(port)m_axi_fb_ARLEN");
    sc_trace(mVcdFile, m_axi_fb_ARSIZE, "(port)m_axi_fb_ARSIZE");
    sc_trace(mVcdFile, m_axi_fb_ARBURST, "(port)m_axi_fb_ARBURST");
    sc_trace(mVcdFile, m_axi_fb_ARLOCK, "(port)m_axi_fb_ARLOCK");
    sc_trace(mVcdFile, m_axi_fb_ARCACHE, "(port)m_axi_fb_ARCACHE");
    sc_trace(mVcdFile, m_axi_fb_ARPROT, "(port)m_axi_fb_ARPROT");
    sc_trace(mVcdFile, m_axi_fb_ARQOS, "(port)m_axi_fb_ARQOS");
    sc_trace(mVcdFile, m_axi_fb_ARREGION, "(port)m_axi_fb_ARREGION");
    sc_trace(mVcdFile, m_axi_fb_ARUSER, "(port)m_axi_fb_ARUSER");
    sc_trace(mVcdFile, m_axi_fb_RVALID, "(port)m_axi_fb_RVALID");
    sc_trace(mVcdFile, m_axi_fb_RREADY, "(port)m_axi_fb_RREADY");
    sc_trace(mVcdFile, m_axi_fb_RDATA, "(port)m_axi_fb_RDATA");
    sc_trace(mVcdFile, m_axi_fb_RLAST, "(port)m_axi_fb_RLAST");
    sc_trace(mVcdFile, m_axi_fb_RID, "(port)m_axi_fb_RID");
    sc_trace(mVcdFile, m_axi_fb_RUSER, "(port)m_axi_fb_RUSER");
    sc_trace(mVcdFile, m_axi_fb_RRESP, "(port)m_axi_fb_RRESP");
    sc_trace(mVcdFile, m_axi_fb_BVALID, "(port)m_axi_fb_BVALID");
    sc_trace(mVcdFile, m_axi_fb_BREADY, "(port)m_axi_fb_BREADY");
    sc_trace(mVcdFile, m_axi_fb_BRESP, "(port)m_axi_fb_BRESP");
    sc_trace(mVcdFile, m_axi_fb_BID, "(port)m_axi_fb_BID");
    sc_trace(mVcdFile, m_axi_fb_BUSER, "(port)m_axi_fb_BUSER");
    sc_trace(mVcdFile, fb_offset_dout, "(port)fb_offset_dout");
    sc_trace(mVcdFile, fb_offset_empty_n, "(port)fb_offset_empty_n");
    sc_trace(mVcdFile, fb_offset_read, "(port)fb_offset_read");
    sc_trace(mVcdFile, img_rows_V_dout, "(port)img_rows_V_dout");
    sc_trace(mVcdFile, img_rows_V_empty_n, "(port)img_rows_V_empty_n");
    sc_trace(mVcdFile, img_rows_V_read, "(port)img_rows_V_read");
    sc_trace(mVcdFile, img_cols_V_dout, "(port)img_cols_V_dout");
    sc_trace(mVcdFile, img_cols_V_empty_n, "(port)img_cols_V_empty_n");
    sc_trace(mVcdFile, img_cols_V_read, "(port)img_cols_V_read");
    sc_trace(mVcdFile, img_data_stream_V_din, "(port)img_data_stream_V_din");
    sc_trace(mVcdFile, img_data_stream_V_full_n, "(port)img_data_stream_V_full_n");
    sc_trace(mVcdFile, img_data_stream_V_write, "(port)img_data_stream_V_write");
    sc_trace(mVcdFile, img_rows_V_out_din, "(port)img_rows_V_out_din");
    sc_trace(mVcdFile, img_rows_V_out_full_n, "(port)img_rows_V_out_full_n");
    sc_trace(mVcdFile, img_rows_V_out_write, "(port)img_rows_V_out_write");
    sc_trace(mVcdFile, img_cols_V_out_din, "(port)img_cols_V_out_din");
    sc_trace(mVcdFile, img_cols_V_out_full_n, "(port)img_cols_V_out_full_n");
    sc_trace(mVcdFile, img_cols_V_out_write, "(port)img_cols_V_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, fb_offset_blk_n, "fb_offset_blk_n");
    sc_trace(mVcdFile, img_rows_V_blk_n, "img_rows_V_blk_n");
    sc_trace(mVcdFile, img_cols_V_blk_n, "img_cols_V_blk_n");
    sc_trace(mVcdFile, img_rows_V_out_blk_n, "img_rows_V_out_blk_n");
    sc_trace(mVcdFile, img_cols_V_out_blk_n, "img_cols_V_out_blk_n");
    sc_trace(mVcdFile, fb_offset_read_reg_154, "fb_offset_read_reg_154");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, img_rows_V_read_reg_159, "img_rows_V_read_reg_159");
    sc_trace(mVcdFile, img_cols_V_read_reg_164, "img_cols_V_read_reg_164");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_ap_start, "grp_Array2Mat_fu_140_ap_start");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_ap_done, "grp_Array2Mat_fu_140_ap_done");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_ap_idle, "grp_Array2Mat_fu_140_ap_idle");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_ap_ready, "grp_Array2Mat_fu_140_ap_ready");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWVALID, "grp_Array2Mat_fu_140_m_axi_fb_AWVALID");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWADDR, "grp_Array2Mat_fu_140_m_axi_fb_AWADDR");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWID, "grp_Array2Mat_fu_140_m_axi_fb_AWID");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWLEN, "grp_Array2Mat_fu_140_m_axi_fb_AWLEN");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWSIZE, "grp_Array2Mat_fu_140_m_axi_fb_AWSIZE");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWBURST, "grp_Array2Mat_fu_140_m_axi_fb_AWBURST");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWLOCK, "grp_Array2Mat_fu_140_m_axi_fb_AWLOCK");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWCACHE, "grp_Array2Mat_fu_140_m_axi_fb_AWCACHE");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWPROT, "grp_Array2Mat_fu_140_m_axi_fb_AWPROT");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWQOS, "grp_Array2Mat_fu_140_m_axi_fb_AWQOS");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWREGION, "grp_Array2Mat_fu_140_m_axi_fb_AWREGION");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_AWUSER, "grp_Array2Mat_fu_140_m_axi_fb_AWUSER");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_WVALID, "grp_Array2Mat_fu_140_m_axi_fb_WVALID");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_WDATA, "grp_Array2Mat_fu_140_m_axi_fb_WDATA");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_WSTRB, "grp_Array2Mat_fu_140_m_axi_fb_WSTRB");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_WLAST, "grp_Array2Mat_fu_140_m_axi_fb_WLAST");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_WID, "grp_Array2Mat_fu_140_m_axi_fb_WID");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_WUSER, "grp_Array2Mat_fu_140_m_axi_fb_WUSER");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARVALID, "grp_Array2Mat_fu_140_m_axi_fb_ARVALID");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARADDR, "grp_Array2Mat_fu_140_m_axi_fb_ARADDR");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARID, "grp_Array2Mat_fu_140_m_axi_fb_ARID");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARLEN, "grp_Array2Mat_fu_140_m_axi_fb_ARLEN");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARSIZE, "grp_Array2Mat_fu_140_m_axi_fb_ARSIZE");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARBURST, "grp_Array2Mat_fu_140_m_axi_fb_ARBURST");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARLOCK, "grp_Array2Mat_fu_140_m_axi_fb_ARLOCK");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARCACHE, "grp_Array2Mat_fu_140_m_axi_fb_ARCACHE");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARPROT, "grp_Array2Mat_fu_140_m_axi_fb_ARPROT");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARQOS, "grp_Array2Mat_fu_140_m_axi_fb_ARQOS");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARREGION, "grp_Array2Mat_fu_140_m_axi_fb_ARREGION");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_ARUSER, "grp_Array2Mat_fu_140_m_axi_fb_ARUSER");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_RREADY, "grp_Array2Mat_fu_140_m_axi_fb_RREADY");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_m_axi_fb_BREADY, "grp_Array2Mat_fu_140_m_axi_fb_BREADY");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_img_data_stream_V_din, "grp_Array2Mat_fu_140_img_data_stream_V_din");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_img_data_stream_V_write, "grp_Array2Mat_fu_140_img_data_stream_V_write");
    sc_trace(mVcdFile, grp_Array2Mat_fu_140_ap_start_reg, "grp_Array2Mat_fu_140_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state1_ignore_call20, "ap_block_state1_ignore_call20");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AXIM2Mat::~AXIM2Mat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_Array2Mat_fu_140;
}

void AXIM2Mat::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void AXIM2Mat::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void AXIM2Mat::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv2_0;
}

void AXIM2Mat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(grp_Array2Mat_fu_140_ap_done.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Array2Mat_fu_140_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
            grp_Array2Mat_fu_140_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Array2Mat_fu_140_ap_ready.read())) {
            grp_Array2Mat_fu_140_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        fb_offset_read_reg_154 = fb_offset_dout.read();
        img_cols_V_read_reg_164 = img_cols_V_dout.read();
        img_rows_V_read_reg_159 = img_rows_V_dout.read();
    }
}

void AXIM2Mat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXIM2Mat::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXIM2Mat::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read()));
}

void AXIM2Mat::thread_ap_block_state1_ignore_call20() {
    ap_block_state1_ignore_call20 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read()));
}

void AXIM2Mat::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_Array2Mat_fu_140_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXIM2Mat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void AXIM2Mat::thread_fb_offset_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        fb_offset_blk_n = fb_offset_empty_n.read();
    } else {
        fb_offset_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_fb_offset_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        fb_offset_read = ap_const_logic_1;
    } else {
        fb_offset_read = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_grp_Array2Mat_fu_140_ap_start() {
    grp_Array2Mat_fu_140_ap_start = grp_Array2Mat_fu_140_ap_start_reg.read();
}

void AXIM2Mat::thread_img_cols_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_cols_V_blk_n = img_cols_V_empty_n.read();
    } else {
        img_cols_V_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_cols_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_cols_V_out_blk_n = img_cols_V_out_full_n.read();
    } else {
        img_cols_V_out_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_cols_V_out_din() {
    img_cols_V_out_din = img_cols_V_dout.read();
}

void AXIM2Mat::thread_img_cols_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_cols_V_out_write = ap_const_logic_1;
    } else {
        img_cols_V_out_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_cols_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_cols_V_read = ap_const_logic_1;
    } else {
        img_cols_V_read = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_data_stream_V_din() {
    img_data_stream_V_din = grp_Array2Mat_fu_140_img_data_stream_V_din.read();
}

void AXIM2Mat::thread_img_data_stream_V_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        img_data_stream_V_write = grp_Array2Mat_fu_140_img_data_stream_V_write.read();
    } else {
        img_data_stream_V_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_rows_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_rows_V_blk_n = img_rows_V_empty_n.read();
    } else {
        img_rows_V_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_rows_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_rows_V_out_blk_n = img_rows_V_out_full_n.read();
    } else {
        img_rows_V_out_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_rows_V_out_din() {
    img_rows_V_out_din = img_rows_V_dout.read();
}

void AXIM2Mat::thread_img_rows_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_rows_V_out_write = ap_const_logic_1;
    } else {
        img_rows_V_out_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_rows_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_rows_V_read = ap_const_logic_1;
    } else {
        img_rows_V_read = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_Array2Mat_fu_140_ap_done.read(), ap_const_logic_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_m_axi_fb_ARADDR() {
    m_axi_fb_ARADDR = grp_Array2Mat_fu_140_m_axi_fb_ARADDR.read();
}

void AXIM2Mat::thread_m_axi_fb_ARBURST() {
    m_axi_fb_ARBURST = grp_Array2Mat_fu_140_m_axi_fb_ARBURST.read();
}

void AXIM2Mat::thread_m_axi_fb_ARCACHE() {
    m_axi_fb_ARCACHE = grp_Array2Mat_fu_140_m_axi_fb_ARCACHE.read();
}

void AXIM2Mat::thread_m_axi_fb_ARID() {
    m_axi_fb_ARID = grp_Array2Mat_fu_140_m_axi_fb_ARID.read();
}

void AXIM2Mat::thread_m_axi_fb_ARLEN() {
    m_axi_fb_ARLEN = grp_Array2Mat_fu_140_m_axi_fb_ARLEN.read();
}

void AXIM2Mat::thread_m_axi_fb_ARLOCK() {
    m_axi_fb_ARLOCK = grp_Array2Mat_fu_140_m_axi_fb_ARLOCK.read();
}

void AXIM2Mat::thread_m_axi_fb_ARPROT() {
    m_axi_fb_ARPROT = grp_Array2Mat_fu_140_m_axi_fb_ARPROT.read();
}

void AXIM2Mat::thread_m_axi_fb_ARQOS() {
    m_axi_fb_ARQOS = grp_Array2Mat_fu_140_m_axi_fb_ARQOS.read();
}

void AXIM2Mat::thread_m_axi_fb_ARREGION() {
    m_axi_fb_ARREGION = grp_Array2Mat_fu_140_m_axi_fb_ARREGION.read();
}

void AXIM2Mat::thread_m_axi_fb_ARSIZE() {
    m_axi_fb_ARSIZE = grp_Array2Mat_fu_140_m_axi_fb_ARSIZE.read();
}

void AXIM2Mat::thread_m_axi_fb_ARUSER() {
    m_axi_fb_ARUSER = grp_Array2Mat_fu_140_m_axi_fb_ARUSER.read();
}

void AXIM2Mat::thread_m_axi_fb_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        m_axi_fb_ARVALID = grp_Array2Mat_fu_140_m_axi_fb_ARVALID.read();
    } else {
        m_axi_fb_ARVALID = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_m_axi_fb_AWADDR() {
    m_axi_fb_AWADDR = ap_const_lv32_0;
}

void AXIM2Mat::thread_m_axi_fb_AWBURST() {
    m_axi_fb_AWBURST = ap_const_lv2_0;
}

void AXIM2Mat::thread_m_axi_fb_AWCACHE() {
    m_axi_fb_AWCACHE = ap_const_lv4_0;
}

void AXIM2Mat::thread_m_axi_fb_AWID() {
    m_axi_fb_AWID = ap_const_lv1_0;
}

void AXIM2Mat::thread_m_axi_fb_AWLEN() {
    m_axi_fb_AWLEN = ap_const_lv32_0;
}

void AXIM2Mat::thread_m_axi_fb_AWLOCK() {
    m_axi_fb_AWLOCK = ap_const_lv2_0;
}

void AXIM2Mat::thread_m_axi_fb_AWPROT() {
    m_axi_fb_AWPROT = ap_const_lv3_0;
}

void AXIM2Mat::thread_m_axi_fb_AWQOS() {
    m_axi_fb_AWQOS = ap_const_lv4_0;
}

void AXIM2Mat::thread_m_axi_fb_AWREGION() {
    m_axi_fb_AWREGION = ap_const_lv4_0;
}

void AXIM2Mat::thread_m_axi_fb_AWSIZE() {
    m_axi_fb_AWSIZE = ap_const_lv3_0;
}

void AXIM2Mat::thread_m_axi_fb_AWUSER() {
    m_axi_fb_AWUSER = ap_const_lv1_0;
}

void AXIM2Mat::thread_m_axi_fb_AWVALID() {
    m_axi_fb_AWVALID = ap_const_logic_0;
}

void AXIM2Mat::thread_m_axi_fb_BREADY() {
    m_axi_fb_BREADY = ap_const_logic_0;
}

void AXIM2Mat::thread_m_axi_fb_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        m_axi_fb_RREADY = grp_Array2Mat_fu_140_m_axi_fb_RREADY.read();
    } else {
        m_axi_fb_RREADY = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_m_axi_fb_WDATA() {
    m_axi_fb_WDATA = ap_const_lv8_0;
}

void AXIM2Mat::thread_m_axi_fb_WID() {
    m_axi_fb_WID = ap_const_lv1_0;
}

void AXIM2Mat::thread_m_axi_fb_WLAST() {
    m_axi_fb_WLAST = ap_const_logic_0;
}

void AXIM2Mat::thread_m_axi_fb_WSTRB() {
    m_axi_fb_WSTRB = ap_const_lv1_0;
}

void AXIM2Mat::thread_m_axi_fb_WUSER() {
    m_axi_fb_WUSER = ap_const_lv1_0;
}

void AXIM2Mat::thread_m_axi_fb_WVALID() {
    m_axi_fb_WVALID = ap_const_logic_0;
}

void AXIM2Mat::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void AXIM2Mat::thread_start_out() {
    start_out = real_start.read();
}

void AXIM2Mat::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, fb_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_Array2Mat_fu_140_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

