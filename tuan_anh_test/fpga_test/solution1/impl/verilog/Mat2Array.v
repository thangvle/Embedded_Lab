// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2Array (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_data_stream_V_dout,
        img_data_stream_V_empty_n,
        img_data_stream_V_read,
        m_axi_fb_AWVALID,
        m_axi_fb_AWREADY,
        m_axi_fb_AWADDR,
        m_axi_fb_AWID,
        m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT,
        m_axi_fb_AWQOS,
        m_axi_fb_AWREGION,
        m_axi_fb_AWUSER,
        m_axi_fb_WVALID,
        m_axi_fb_WREADY,
        m_axi_fb_WDATA,
        m_axi_fb_WSTRB,
        m_axi_fb_WLAST,
        m_axi_fb_WID,
        m_axi_fb_WUSER,
        m_axi_fb_ARVALID,
        m_axi_fb_ARREADY,
        m_axi_fb_ARADDR,
        m_axi_fb_ARID,
        m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT,
        m_axi_fb_ARQOS,
        m_axi_fb_ARREGION,
        m_axi_fb_ARUSER,
        m_axi_fb_RVALID,
        m_axi_fb_RREADY,
        m_axi_fb_RDATA,
        m_axi_fb_RLAST,
        m_axi_fb_RID,
        m_axi_fb_RUSER,
        m_axi_fb_RRESP,
        m_axi_fb_BVALID,
        m_axi_fb_BREADY,
        m_axi_fb_BRESP,
        m_axi_fb_BID,
        m_axi_fb_BUSER,
        fb_offset
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_state7 = 9'd16;
parameter    ap_ST_fsm_state8 = 9'd32;
parameter    ap_ST_fsm_state9 = 9'd64;
parameter    ap_ST_fsm_state10 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] img_data_stream_V_dout;
input   img_data_stream_V_empty_n;
output   img_data_stream_V_read;
output   m_axi_fb_AWVALID;
input   m_axi_fb_AWREADY;
output  [31:0] m_axi_fb_AWADDR;
output  [0:0] m_axi_fb_AWID;
output  [31:0] m_axi_fb_AWLEN;
output  [2:0] m_axi_fb_AWSIZE;
output  [1:0] m_axi_fb_AWBURST;
output  [1:0] m_axi_fb_AWLOCK;
output  [3:0] m_axi_fb_AWCACHE;
output  [2:0] m_axi_fb_AWPROT;
output  [3:0] m_axi_fb_AWQOS;
output  [3:0] m_axi_fb_AWREGION;
output  [0:0] m_axi_fb_AWUSER;
output   m_axi_fb_WVALID;
input   m_axi_fb_WREADY;
output  [7:0] m_axi_fb_WDATA;
output  [0:0] m_axi_fb_WSTRB;
output   m_axi_fb_WLAST;
output  [0:0] m_axi_fb_WID;
output  [0:0] m_axi_fb_WUSER;
output   m_axi_fb_ARVALID;
input   m_axi_fb_ARREADY;
output  [31:0] m_axi_fb_ARADDR;
output  [0:0] m_axi_fb_ARID;
output  [31:0] m_axi_fb_ARLEN;
output  [2:0] m_axi_fb_ARSIZE;
output  [1:0] m_axi_fb_ARBURST;
output  [1:0] m_axi_fb_ARLOCK;
output  [3:0] m_axi_fb_ARCACHE;
output  [2:0] m_axi_fb_ARPROT;
output  [3:0] m_axi_fb_ARQOS;
output  [3:0] m_axi_fb_ARREGION;
output  [0:0] m_axi_fb_ARUSER;
input   m_axi_fb_RVALID;
output   m_axi_fb_RREADY;
input  [7:0] m_axi_fb_RDATA;
input   m_axi_fb_RLAST;
input  [0:0] m_axi_fb_RID;
input  [0:0] m_axi_fb_RUSER;
input  [1:0] m_axi_fb_RRESP;
input   m_axi_fb_BVALID;
output   m_axi_fb_BREADY;
input  [1:0] m_axi_fb_BRESP;
input  [0:0] m_axi_fb_BID;
input  [0:0] m_axi_fb_BUSER;
input  [31:0] fb_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_V_read;
reg m_axi_fb_AWVALID;
reg m_axi_fb_WVALID;
reg m_axi_fb_BREADY;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_234;
reg    fb_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    fb_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_234_pp0_iter1_reg;
reg    fb_blk_n_B;
wire    ap_CS_fsm_state11;
reg   [10:0] t_V_1_reg_131;
wire  signed [32:0] sext_cast_fu_142_p1;
reg  signed [32:0] sext_cast_reg_215;
wire   [10:0] row_V_fu_152_p2;
reg   [10:0] row_V_reg_223;
wire    ap_CS_fsm_state2;
reg   [31:0] fb_addr_reg_228;
wire   [0:0] exitcond1_fu_146_p2;
wire   [0:0] exitcond_fu_203_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_fb_WREADY;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] col_V_fu_209_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_3_reg_243;
reg    ap_sig_ioackin_m_axi_fb_AWREADY;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [10:0] t_V_reg_120;
wire  signed [63:0] sum1_cast_fu_193_p1;
reg    ap_reg_ioackin_m_axi_fb_AWREADY;
reg    ap_reg_ioackin_m_axi_fb_WREADY;
reg    ap_block_pp0_stage0_01001;
wire   [17:0] p_shl2_fu_166_p3;
wire   [21:0] p_shl_fu_158_p3;
wire   [21:0] p_shl2_cast_fu_174_p1;
wire   [21:0] ret_V_fu_178_p2;
wire  signed [32:0] tmp_6_cast_fu_184_p1;
wire   [32:0] sum1_fu_188_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_fb_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_fb_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_fb_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_fb_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_fb_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_m_axi_fb_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_fb_AWREADY <= 1'b0;
            end else if ((m_axi_fb_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_fb_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_fb_WREADY <= 1'b0;
    end else begin
        if (((exitcond_reg_234_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_fb_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_fb_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_fb_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_131 <= col_V_fu_209_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_fb_AWREADY == 1'b1))) begin
        t_V_1_reg_131 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_fb_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        t_V_reg_120 <= row_V_reg_223;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_120 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_234 <= exitcond_fu_203_p2;
        exitcond_reg_234_pp0_iter1_reg <= exitcond_reg_234;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        fb_addr_reg_228 <= sum1_cast_fu_193_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_V_reg_223 <= row_V_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_cast_reg_215 <= sext_cast_fu_142_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_234 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_reg_243 <= img_data_stream_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_fu_203_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_fb_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_fb_AWREADY = m_axi_fb_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_fb_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_fb_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_fb_WREADY = m_axi_fb_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_fb_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fb_blk_n_AW = m_axi_fb_AWREADY;
    end else begin
        fb_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        fb_blk_n_B = m_axi_fb_BVALID;
    end else begin
        fb_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_reg_234_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fb_blk_n_W = m_axi_fb_WREADY;
    end else begin
        fb_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_reg_234 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_data_stream_V_blk_n = img_data_stream_V_empty_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_234 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_data_stream_V_read = 1'b1;
    end else begin
        img_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_fb_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_fb_AWVALID = 1'b1;
    end else begin
        m_axi_fb_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_fb_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_fb_BREADY = 1'b1;
    end else begin
        m_axi_fb_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_234_pp0_iter1_reg == 1'd0) & (ap_reg_ioackin_m_axi_fb_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_fb_WVALID = 1'b1;
    end else begin
        m_axi_fb_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_fb_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_203_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_203_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_fb_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_234 == 1'd0) & (img_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_reg_234 == 1'd0) & (img_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_reg_234 == 1'd0) & (img_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((exitcond_reg_234 == 1'd0) & (img_data_stream_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((exitcond_reg_234_pp0_iter1_reg == 1'd0) & (ap_sig_ioackin_m_axi_fb_WREADY == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_V_fu_209_p2 = (t_V_1_reg_131 + 11'd1);

assign exitcond1_fu_146_p2 = ((t_V_reg_120 == 11'd1080) ? 1'b1 : 1'b0);

assign exitcond_fu_203_p2 = ((t_V_1_reg_131 == 11'd1920) ? 1'b1 : 1'b0);

assign m_axi_fb_ARADDR = 32'd0;

assign m_axi_fb_ARBURST = 2'd0;

assign m_axi_fb_ARCACHE = 4'd0;

assign m_axi_fb_ARID = 1'd0;

assign m_axi_fb_ARLEN = 32'd0;

assign m_axi_fb_ARLOCK = 2'd0;

assign m_axi_fb_ARPROT = 3'd0;

assign m_axi_fb_ARQOS = 4'd0;

assign m_axi_fb_ARREGION = 4'd0;

assign m_axi_fb_ARSIZE = 3'd0;

assign m_axi_fb_ARUSER = 1'd0;

assign m_axi_fb_ARVALID = 1'b0;

assign m_axi_fb_AWADDR = fb_addr_reg_228;

assign m_axi_fb_AWBURST = 2'd0;

assign m_axi_fb_AWCACHE = 4'd0;

assign m_axi_fb_AWID = 1'd0;

assign m_axi_fb_AWLEN = 32'd1920;

assign m_axi_fb_AWLOCK = 2'd0;

assign m_axi_fb_AWPROT = 3'd0;

assign m_axi_fb_AWQOS = 4'd0;

assign m_axi_fb_AWREGION = 4'd0;

assign m_axi_fb_AWSIZE = 3'd0;

assign m_axi_fb_AWUSER = 1'd0;

assign m_axi_fb_RREADY = 1'b0;

assign m_axi_fb_WDATA = tmp_3_reg_243;

assign m_axi_fb_WID = 1'd0;

assign m_axi_fb_WLAST = 1'b0;

assign m_axi_fb_WSTRB = 1'd1;

assign m_axi_fb_WUSER = 1'd0;

assign p_shl2_cast_fu_174_p1 = p_shl2_fu_166_p3;

assign p_shl2_fu_166_p3 = {{t_V_reg_120}, {7'd0}};

assign p_shl_fu_158_p3 = {{t_V_reg_120}, {11'd0}};

assign ret_V_fu_178_p2 = (p_shl_fu_158_p3 - p_shl2_cast_fu_174_p1);

assign row_V_fu_152_p2 = (t_V_reg_120 + 11'd1);

assign sext_cast_fu_142_p1 = $signed(fb_offset);

assign sum1_cast_fu_193_p1 = $signed(sum1_fu_188_p2);

assign sum1_fu_188_p2 = ($signed(tmp_6_cast_fu_184_p1) + $signed(sext_cast_reg_215));

assign tmp_6_cast_fu_184_p1 = $signed(ret_V_fu_178_p2);

endmodule //Mat2Array
