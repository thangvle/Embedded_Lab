-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIM2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_fb_AWVALID : OUT STD_LOGIC;
    m_axi_fb_AWREADY : IN STD_LOGIC;
    m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WVALID : OUT STD_LOGIC;
    m_axi_fb_WREADY : IN STD_LOGIC;
    m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WLAST : OUT STD_LOGIC;
    m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARVALID : OUT STD_LOGIC;
    m_axi_fb_ARREADY : IN STD_LOGIC;
    m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RVALID : IN STD_LOGIC;
    m_axi_fb_RREADY : OUT STD_LOGIC;
    m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_RLAST : IN STD_LOGIC;
    m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BVALID : IN STD_LOGIC;
    m_axi_fb_BREADY : OUT STD_LOGIC;
    m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fb_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fb_offset_empty_n : IN STD_LOGIC;
    fb_offset_read : OUT STD_LOGIC;
    img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    img_rows_V_empty_n : IN STD_LOGIC;
    img_rows_V_read : OUT STD_LOGIC;
    img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_empty_n : IN STD_LOGIC;
    img_cols_V_read : OUT STD_LOGIC;
    img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_full_n : IN STD_LOGIC;
    img_data_stream_V_write : OUT STD_LOGIC;
    img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_rows_V_out_full_n : IN STD_LOGIC;
    img_rows_V_out_write : OUT STD_LOGIC;
    img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_out_full_n : IN STD_LOGIC;
    img_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of AXIM2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fb_offset_blk_n : STD_LOGIC;
    signal img_rows_V_blk_n : STD_LOGIC;
    signal img_cols_V_blk_n : STD_LOGIC;
    signal img_rows_V_out_blk_n : STD_LOGIC;
    signal img_cols_V_out_blk_n : STD_LOGIC;
    signal fb_offset_read_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal img_rows_V_read_reg_159 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_cols_V_read_reg_164 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Array2Mat_fu_140_ap_start : STD_LOGIC;
    signal grp_Array2Mat_fu_140_ap_done : STD_LOGIC;
    signal grp_Array2Mat_fu_140_ap_idle : STD_LOGIC;
    signal grp_Array2Mat_fu_140_ap_ready : STD_LOGIC;
    signal grp_Array2Mat_fu_140_m_axi_fb_AWVALID : STD_LOGIC;
    signal grp_Array2Mat_fu_140_m_axi_fb_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_WVALID : STD_LOGIC;
    signal grp_Array2Mat_fu_140_m_axi_fb_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_WLAST : STD_LOGIC;
    signal grp_Array2Mat_fu_140_m_axi_fb_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARVALID : STD_LOGIC;
    signal grp_Array2Mat_fu_140_m_axi_fb_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Array2Mat_fu_140_m_axi_fb_RREADY : STD_LOGIC;
    signal grp_Array2Mat_fu_140_m_axi_fb_BREADY : STD_LOGIC;
    signal grp_Array2Mat_fu_140_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Array2Mat_fu_140_img_data_stream_V_write : STD_LOGIC;
    signal grp_Array2Mat_fu_140_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call20 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component Array2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_fb_AWVALID : OUT STD_LOGIC;
        m_axi_fb_AWREADY : IN STD_LOGIC;
        m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WVALID : OUT STD_LOGIC;
        m_axi_fb_WREADY : IN STD_LOGIC;
        m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WLAST : OUT STD_LOGIC;
        m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARVALID : OUT STD_LOGIC;
        m_axi_fb_ARREADY : IN STD_LOGIC;
        m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RVALID : IN STD_LOGIC;
        m_axi_fb_RREADY : OUT STD_LOGIC;
        m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_RLAST : IN STD_LOGIC;
        m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BVALID : IN STD_LOGIC;
        m_axi_fb_BREADY : OUT STD_LOGIC;
        m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fb_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC );
    end component;



begin
    grp_Array2Mat_fu_140 : component Array2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Array2Mat_fu_140_ap_start,
        ap_done => grp_Array2Mat_fu_140_ap_done,
        ap_idle => grp_Array2Mat_fu_140_ap_idle,
        ap_ready => grp_Array2Mat_fu_140_ap_ready,
        m_axi_fb_AWVALID => grp_Array2Mat_fu_140_m_axi_fb_AWVALID,
        m_axi_fb_AWREADY => ap_const_logic_0,
        m_axi_fb_AWADDR => grp_Array2Mat_fu_140_m_axi_fb_AWADDR,
        m_axi_fb_AWID => grp_Array2Mat_fu_140_m_axi_fb_AWID,
        m_axi_fb_AWLEN => grp_Array2Mat_fu_140_m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE => grp_Array2Mat_fu_140_m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST => grp_Array2Mat_fu_140_m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK => grp_Array2Mat_fu_140_m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE => grp_Array2Mat_fu_140_m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT => grp_Array2Mat_fu_140_m_axi_fb_AWPROT,
        m_axi_fb_AWQOS => grp_Array2Mat_fu_140_m_axi_fb_AWQOS,
        m_axi_fb_AWREGION => grp_Array2Mat_fu_140_m_axi_fb_AWREGION,
        m_axi_fb_AWUSER => grp_Array2Mat_fu_140_m_axi_fb_AWUSER,
        m_axi_fb_WVALID => grp_Array2Mat_fu_140_m_axi_fb_WVALID,
        m_axi_fb_WREADY => ap_const_logic_0,
        m_axi_fb_WDATA => grp_Array2Mat_fu_140_m_axi_fb_WDATA,
        m_axi_fb_WSTRB => grp_Array2Mat_fu_140_m_axi_fb_WSTRB,
        m_axi_fb_WLAST => grp_Array2Mat_fu_140_m_axi_fb_WLAST,
        m_axi_fb_WID => grp_Array2Mat_fu_140_m_axi_fb_WID,
        m_axi_fb_WUSER => grp_Array2Mat_fu_140_m_axi_fb_WUSER,
        m_axi_fb_ARVALID => grp_Array2Mat_fu_140_m_axi_fb_ARVALID,
        m_axi_fb_ARREADY => m_axi_fb_ARREADY,
        m_axi_fb_ARADDR => grp_Array2Mat_fu_140_m_axi_fb_ARADDR,
        m_axi_fb_ARID => grp_Array2Mat_fu_140_m_axi_fb_ARID,
        m_axi_fb_ARLEN => grp_Array2Mat_fu_140_m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE => grp_Array2Mat_fu_140_m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST => grp_Array2Mat_fu_140_m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK => grp_Array2Mat_fu_140_m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE => grp_Array2Mat_fu_140_m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT => grp_Array2Mat_fu_140_m_axi_fb_ARPROT,
        m_axi_fb_ARQOS => grp_Array2Mat_fu_140_m_axi_fb_ARQOS,
        m_axi_fb_ARREGION => grp_Array2Mat_fu_140_m_axi_fb_ARREGION,
        m_axi_fb_ARUSER => grp_Array2Mat_fu_140_m_axi_fb_ARUSER,
        m_axi_fb_RVALID => m_axi_fb_RVALID,
        m_axi_fb_RREADY => grp_Array2Mat_fu_140_m_axi_fb_RREADY,
        m_axi_fb_RDATA => m_axi_fb_RDATA,
        m_axi_fb_RLAST => m_axi_fb_RLAST,
        m_axi_fb_RID => m_axi_fb_RID,
        m_axi_fb_RUSER => m_axi_fb_RUSER,
        m_axi_fb_RRESP => m_axi_fb_RRESP,
        m_axi_fb_BVALID => ap_const_logic_0,
        m_axi_fb_BREADY => grp_Array2Mat_fu_140_m_axi_fb_BREADY,
        m_axi_fb_BRESP => ap_const_lv2_0,
        m_axi_fb_BID => ap_const_lv1_0,
        m_axi_fb_BUSER => ap_const_lv1_0,
        fb_offset => fb_offset_read_reg_154,
        img_rows_V_read => img_rows_V_read_reg_159,
        img_cols_V_read => img_cols_V_read_reg_164,
        img_data_stream_V_din => grp_Array2Mat_fu_140_img_data_stream_V_din,
        img_data_stream_V_full_n => img_data_stream_V_full_n,
        img_data_stream_V_write => grp_Array2Mat_fu_140_img_data_stream_V_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Array2Mat_fu_140_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Array2Mat_fu_140_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Array2Mat_fu_140_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Array2Mat_fu_140_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Array2Mat_fu_140_ap_ready = ap_const_logic_1)) then 
                    grp_Array2Mat_fu_140_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                fb_offset_read_reg_154 <= fb_offset_dout;
                img_cols_V_read_reg_164 <= img_cols_V_dout;
                img_rows_V_read_reg_159 <= img_rows_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n, grp_Array2Mat_fu_140_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Array2Mat_fu_140_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
                ap_block_state1 <= ((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call20_assign_proc : process(real_start, ap_done_reg, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
                ap_block_state1_ignore_call20 <= ((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_Array2Mat_fu_140_ap_done, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Array2Mat_fu_140_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fb_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fb_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fb_offset_blk_n <= fb_offset_empty_n;
        else 
            fb_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fb_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fb_offset_read <= ap_const_logic_1;
        else 
            fb_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_Array2Mat_fu_140_ap_start <= grp_Array2Mat_fu_140_ap_start_reg;

    img_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_blk_n <= img_cols_V_empty_n;
        else 
            img_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_cols_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_out_blk_n <= img_cols_V_out_full_n;
        else 
            img_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_cols_V_out_din <= img_cols_V_dout;

    img_cols_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_out_write <= ap_const_logic_1;
        else 
            img_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_read <= ap_const_logic_1;
        else 
            img_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_V_din <= grp_Array2Mat_fu_140_img_data_stream_V_din;

    img_data_stream_V_write_assign_proc : process(grp_Array2Mat_fu_140_img_data_stream_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_data_stream_V_write <= grp_Array2Mat_fu_140_img_data_stream_V_write;
        else 
            img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_blk_n <= img_rows_V_empty_n;
        else 
            img_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_rows_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_out_blk_n <= img_rows_V_out_full_n;
        else 
            img_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_rows_V_out_din <= img_rows_V_dout;

    img_rows_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_out_write <= ap_const_logic_1;
        else 
            img_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fb_offset_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((fb_offset_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_read <= ap_const_logic_1;
        else 
            img_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(grp_Array2Mat_fu_140_ap_done, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Array2Mat_fu_140_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_ARADDR <= grp_Array2Mat_fu_140_m_axi_fb_ARADDR;
    m_axi_fb_ARBURST <= grp_Array2Mat_fu_140_m_axi_fb_ARBURST;
    m_axi_fb_ARCACHE <= grp_Array2Mat_fu_140_m_axi_fb_ARCACHE;
    m_axi_fb_ARID <= grp_Array2Mat_fu_140_m_axi_fb_ARID;
    m_axi_fb_ARLEN <= grp_Array2Mat_fu_140_m_axi_fb_ARLEN;
    m_axi_fb_ARLOCK <= grp_Array2Mat_fu_140_m_axi_fb_ARLOCK;
    m_axi_fb_ARPROT <= grp_Array2Mat_fu_140_m_axi_fb_ARPROT;
    m_axi_fb_ARQOS <= grp_Array2Mat_fu_140_m_axi_fb_ARQOS;
    m_axi_fb_ARREGION <= grp_Array2Mat_fu_140_m_axi_fb_ARREGION;
    m_axi_fb_ARSIZE <= grp_Array2Mat_fu_140_m_axi_fb_ARSIZE;
    m_axi_fb_ARUSER <= grp_Array2Mat_fu_140_m_axi_fb_ARUSER;

    m_axi_fb_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_Array2Mat_fu_140_m_axi_fb_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_fb_ARVALID <= grp_Array2Mat_fu_140_m_axi_fb_ARVALID;
        else 
            m_axi_fb_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_AWADDR <= ap_const_lv32_0;
    m_axi_fb_AWBURST <= ap_const_lv2_0;
    m_axi_fb_AWCACHE <= ap_const_lv4_0;
    m_axi_fb_AWID <= ap_const_lv1_0;
    m_axi_fb_AWLEN <= ap_const_lv32_0;
    m_axi_fb_AWLOCK <= ap_const_lv2_0;
    m_axi_fb_AWPROT <= ap_const_lv3_0;
    m_axi_fb_AWQOS <= ap_const_lv4_0;
    m_axi_fb_AWREGION <= ap_const_lv4_0;
    m_axi_fb_AWSIZE <= ap_const_lv3_0;
    m_axi_fb_AWUSER <= ap_const_lv1_0;
    m_axi_fb_AWVALID <= ap_const_logic_0;
    m_axi_fb_BREADY <= ap_const_logic_0;

    m_axi_fb_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_Array2Mat_fu_140_m_axi_fb_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_fb_RREADY <= grp_Array2Mat_fu_140_m_axi_fb_RREADY;
        else 
            m_axi_fb_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_WDATA <= ap_const_lv8_0;
    m_axi_fb_WID <= ap_const_lv1_0;
    m_axi_fb_WLAST <= ap_const_logic_0;
    m_axi_fb_WSTRB <= ap_const_lv1_0;
    m_axi_fb_WUSER <= ap_const_lv1_0;
    m_axi_fb_WVALID <= ap_const_logic_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
