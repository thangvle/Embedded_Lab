/*
 * LED_test.c
 *
 *  Created on: 	13 June 2013
 *      Author: 	Ross Elliot
 *     Version:		1.2
 */

/********************************************************************************************
 * VERSION HISTORY
 ********************************************************************************************
 * 	v1.2 - 13 February 2015
 * 		Modified for Zybo Development Board ~ DN
 *
 * 	v1.1 - 27 January 2014
 * 		GPIO_DEVICE_ID definition updated to reflect new naming conventions in Vivado 2013.3
 *		onwards.
 *
 *	v1.0 - 13 June 2013
 *		First version created.
 *******************************************************************************************/

/********************************************************************************************
 * This file contains an example of using the GPIO driver to provide communication between
 * the Zynq Processing System (PS) and the AXI GPIO block implemented in the Zynq Programmable
 * Logic (PL). The AXI GPIO is connected to the LEDs on the Zybo.
 *
 * The provided code demonstrates how to use the GPIO driver to write to the memory mapped AXI
 * GPIO block, which in turn controls the LEDs.
 ********************************************************************************************/

/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"

/* Definitions */
#define BTNS_DEVICE_ID	 XPAR_AXI_GPIO_0_DEVICE_ID	/* GPIO device that LEDs are connected to */
#define LEDS_DEVICE_ID	 XPAR_AXI_GPIO_1_DEVICE_ID
#define LED 0x0										/* Initial LED value - X00X */
#define LED_DELAY 10000000							/* Software delay length */
#define LED_CHANNEL 1								/* GPIO port for LEDs */
#define printf xil_printf							/* smaller, optimised printf */

XGpio LEDInst;
XGpio BTNInst;

int LEDOutputExample(void) {

	//volatile int Delay;
	int Status;
	int btn_val;
	int led = LED; /* Hold current LED value. Initialise to LED definition */
	int buttonRead;

	/* GPIO driver initialisation */

	Status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	Status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*Set the direction for the LEDs to output. */
	XGpio_SetDataDirection(&LEDInst, 1, 0x0);
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

	/* Loop forever blinking the LED. */

	/* Write output to the LEDs. */
	while (1) {
		btn_val = XGpio_DiscreteRead(&BTNInst, 1);

		switch (btn_val) {
		//for(int i = 0; i < 16; i++){
		case 0x1:
			led = 0;
			while (1) {
				buttonRead = XGpio_DiscreteRead(&BTNInst, 1);

				if (buttonRead != 1 && buttonRead != 0) {
					break;
				}

				led = led + 1;

				XGpio_DiscreteWrite(&LEDInst, LED_CHANNEL, led);
				for (int Delay = 0; Delay < LED_DELAY; Delay++)
					;
			}
			break;

		case 0x2:

			led = 0;

			while (1) {
				buttonRead = XGpio_DiscreteRead(&BTNInst, 1);

				if (buttonRead != 0) {
					break;
				}

				led = led - 1;

				XGpio_DiscreteWrite(&LEDInst, LED_CHANNEL, led);
				for (int Delay = 0; Delay < LED_DELAY; Delay++);

			}
			break;

		case 0x4:
			led = 0;

			for (int i = 0; i < 16; i++){
				buttonRead = XGpio_DiscreteRead(&BTNInst, 1);

				if (buttonRead != 0) {
					break;
				}

				led += 1;

				if (led == 0x8){

				}

				XGpio_DiscreteWrite(&LEDInst, LED_CHANNEL, led);
				for(int Delay = 0; Delay <LED_DELAY; Delay++);
			}

			break;

		case 0x8:
			while (1) {
				buttonRead = XGpio_DiscreteRead(&BTNInst, 1);

				if (buttonRead != 0) {
					break;
				}

				led = 0b1001;
				XGpio_DiscreteWrite(&LEDInst, LED_CHANNEL, led);
				for (int Delay = 0; Delay < LED_DELAY; Delay++)
					;
				led = 0b0110;
				XGpio_DiscreteWrite(&LEDInst, LED_CHANNEL, led);
				for (int Delay = 0; Delay < LED_DELAY; Delay++)
					;
				led = 0b1010;
				XGpio_DiscreteWrite(&LEDInst, LED_CHANNEL, led);
				for (int Delay = 0; Delay < LED_DELAY; Delay++)
					;

			}

			break;

			/* Wait a small amount of time so that the LED blinking is visible. */

		}
	}

	return XST_SUCCESS; /* Should be unreachable */
}

/* Main function. */
int main(void) {

	int Status;

	/* Execute the LED output. */
	Status = LEDOutputExample();
	if (Status != XST_SUCCESS) {
		xil_printf("GPIO output to the LEDs failed!\r\n");
	}

	return 0;
}

